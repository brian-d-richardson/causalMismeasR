vare = sim.in$vare[ii],
a = a,
seed = sim.in$sim.id[ii])
},
FUN.VALUE = numeric(84)) |>
t()
View(sim.out)
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/gfmla_nonlinear_2_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
# true estimands
g <- c(-2, 0.7, -0.6, 0.4, -0.4, -0.2)          # outcome model parameters
a <- as.numeric(select(                         # exposure value of interest
sim.out, starts_with("a"))[1,])
View(sim.out.summary)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(devtools)
load_all()
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/gfmla_nonlinear_2_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
View(sim.out.list)
View(sim.out)
# true estimands
g <- c(0, 0.25, 0.5, -0.5, 1)          # outcome model parameters
a <- -1:2                                        # exposure value of interest
EYa.true <- g[1] + 0.5*g[5] + a*g[2] + a^2*g[3] + a^3*g[4]
# number of sims per setting
n.rep <- nrow(sim.out) / n_distinct(dplyr::select(sim.out, n, B, vare))
# make long data frame
sim.out.long <- sim.out %>%
dplyr::select(!starts_with("a")) %>%
pivot_longer(cols = starts_with("OG") | starts_with("NG") | starts_with("CG"),
names_to = "method.aa",
values_to = "val") %>%
mutate(method = factor(substr(method.aa, 1, 2),
levels = c("OG", "NG", "CG"),
labels = c("Oracle G-Formula",
"Naive G-Formula",
"G-Formula CS")),
aa = as.numeric(gsub("[.]", "", substr(method.aa, 4, 5))),
a = a[aa],
EYa.true = EYa.true[aa]) %>%
dplyr::select(-method.aa)
# make summary data frame
sim.out.summary <- sim.out.long %>%
group_by(n, vare, B, method, a) %>%
summarise(bias = mean(val - EYa.true),
se = sd(val) / sqrt(n.rep),
bias.lower = bias - qnorm(0.975) * se,
bias.upper = bias + qnorm(0.975) * se)
# summarize proportion of missing data by setting
sim.out.long %>%
filter(aa == 1) %>%
group_by(method, n, B, vare) %>%
summarise(prop.error = mean(is.na(val))) %>%
filter(prop.error > 0) %>%
ungroup()
p <- sim.out.summary %>%
ggplot(
aes(x = a,
y = bias,
ymin = bias.lower,
ymax = bias.upper)) +
geom_point() +
geom_line() +
facet_grid(~ method) +
theme_bw() +
theme(legend.position = c(0.2, 0.3)) +
labs(color = "Method",
shape = "Method",
fill = "Method",
y = "Bias")
p
View(sim.out.list)
# true estimands
g <- c(0, 0.25, 0.5, -0.5, 1)          # outcome model parameters
a <- seq(-1, 2, length - 20)           # exposure value of interest
EYa.true <- g[1] + 0.5*g[5] + a*g[2] + a^2*g[3] + a^3*g[4]
# number of sims per setting
n.rep <- nrow(sim.out) / n_distinct(dplyr::select(sim.out, n, B, vare))
# make long data frame
sim.out.long <- sim.out %>%
dplyr::select(!starts_with("a")) %>%
pivot_longer(cols = starts_with("OG") | starts_with("NG") | starts_with("CG"),
names_to = "method.aa",
values_to = "val") %>%
mutate(method = factor(substr(method.aa, 1, 2),
levels = c("OG", "NG", "CG"),
labels = c("Oracle G-Formula",
"Naive G-Formula",
"G-Formula CS")),
aa = as.numeric(gsub("[.]", "", substr(method.aa, 4, 5))),
a = a[aa],
EYa.true = EYa.true[aa]) %>%
dplyr::select(-method.aa)
# make summary data frame
sim.out.summary <- sim.out.long %>%
group_by(n, vare, B, method, a) %>%
summarise(bias = mean(val - EYa.true),
se = sd(val) / sqrt(n.rep),
bias.lower = bias - qnorm(0.975) * se,
bias.upper = bias + qnorm(0.975) * se)
# summarize proportion of missing data by setting
sim.out.long %>%
filter(aa == 1) %>%
group_by(method, n, B, vare) %>%
summarise(prop.error = mean(is.na(val))) %>%
filter(prop.error > 0) %>%
ungroup()
p <- sim.out.summary %>%
ggplot(
aes(x = a,
y = bias,
ymin = bias.lower,
ymax = bias.upper)) +
geom_point() +
geom_line() +
facet_grid(~ method) +
theme_bw() +
theme(legend.position = c(0.2, 0.3)) +
labs(color = "Method",
shape = "Method",
fill = "Method",
y = "Bias")
p
View(sim.out)
View(sim.out.summary)
# make summary data frame
sim.out.summary <- sim.out.long %>%
group_by(n, vare, B, method, a) %>%
summarise(bias = mean(val - EYa.true),
se = sd(val) / sqrt(n.rep),
bias.lower = bias - qnorm(0.975) * se,
bias.upper = bias + qnorm(0.975) * se)
a <- seq(-1, 2, length - 20)           # exposure value of interest
EYa.true <- g[1] + 0.5*g[5] + a*g[2] + a^2*g[3] + a^3*g[4]
a <- seq(-1, 2, length = 20)           # exposure value of interest
EYa.true <- g[1] + 0.5*g[5] + a*g[2] + a^2*g[3] + a^3*g[4]
# number of sims per setting
n.rep <- nrow(sim.out) / n_distinct(dplyr::select(sim.out, n, B, vare))
# make long data frame
sim.out.long <- sim.out %>%
dplyr::select(!starts_with("a")) %>%
pivot_longer(cols = starts_with("OG") | starts_with("NG") | starts_with("CG"),
names_to = "method.aa",
values_to = "val") %>%
mutate(method = factor(substr(method.aa, 1, 2),
levels = c("OG", "NG", "CG"),
labels = c("Oracle G-Formula",
"Naive G-Formula",
"G-Formula CS")),
aa = as.numeric(gsub("[.]", "", substr(method.aa, 4, 5))),
a = a[aa],
EYa.true = EYa.true[aa]) %>%
dplyr::select(-method.aa)
# make summary data frame
sim.out.summary <- sim.out.long %>%
group_by(n, vare, B, method, a) %>%
summarise(bias = mean(val - EYa.true),
se = sd(val) / sqrt(n.rep),
bias.lower = bias - qnorm(0.975) * se,
bias.upper = bias + qnorm(0.975) * se)
# summarize proportion of missing data by setting
sim.out.long %>%
filter(aa == 1) %>%
group_by(method, n, B, vare) %>%
summarise(prop.error = mean(is.na(val))) %>%
filter(prop.error > 0) %>%
ungroup()
p <- sim.out.summary %>%
ggplot(
aes(x = a,
y = bias,
ymin = bias.lower,
ymax = bias.upper)) +
geom_point() +
geom_line() +
facet_grid(~ method) +
theme_bw() +
theme(legend.position = c(0.2, 0.3)) +
labs(color = "Method",
shape = "Method",
fill = "Method",
y = "Bias")
p
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(devtools)
load_all()
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/gfmla_nonlinear_2_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
# true estimands
g <- c(0, 0.25, 0.5, -0.5, 1)          # outcome model parameters
a <- seq(-1, 2, length = 20)           # exposure value of interest
EYa.true <- g[1] + 0.5*g[5] + a*g[2] + a^2*g[3] + a^3*g[4]
# number of sims per setting
n.rep <- nrow(sim.out) / n_distinct(dplyr::select(sim.out, n, B, vare))
# make long data frame
sim.out.long <- sim.out %>%
dplyr::select(!starts_with("a")) %>%
pivot_longer(cols = starts_with("OG") | starts_with("NG") | starts_with("CG"),
names_to = "method.aa",
values_to = "val") %>%
mutate(method = factor(substr(method.aa, 1, 2),
levels = c("OG", "NG", "CG"),
labels = c("Oracle G-Formula",
"Naive G-Formula",
"G-Formula CS")),
aa = as.numeric(gsub("[.]", "", substr(method.aa, 4, 5))),
a = a[aa],
EYa.true = EYa.true[aa]) %>%
dplyr::select(-method.aa)
# make summary data frame
sim.out.summary <- sim.out.long %>%
group_by(n, vare, B, method, a) %>%
summarise(bias = mean(val - EYa.true),
se = sd(val) / sqrt(n.rep),
bias.lower = bias - qnorm(0.975) * se,
bias.upper = bias + qnorm(0.975) * se)
# summarize proportion of missing data by setting
sim.out.long %>%
filter(aa == 1) %>%
group_by(method, n, B, vare) %>%
summarise(prop.error = mean(is.na(val))) %>%
filter(prop.error > 0) %>%
ungroup()
p <- sim.out.summary %>%
ggplot(
aes(x = a,
y = bias,
ymin = bias.lower,
ymax = bias.upper)) +
geom_point() +
geom_line() +
facet_grid(n ~ method) +
theme_bw() +
theme(legend.position = c(0.2, 0.3)) +
labs(color = "Method",
shape = "Method",
fill = "Method",
y = "Bias")
p
theme_bw() +
theme(legend.position = c(0.2, 0.3)) +
labs(color = "Method",
shape = "Method",
fill = "Method",
y = "Bias")
theme_bw() +
theme(legend.position = c(0.2, 0.3)) +
labs(color = "Method",
shape = "Method",
fill = "Method",
y = "Bias")
theme_bw() +
theme(legend.position = c(0.2, 0.3)) +
labs(color = "Method",
shape = "Method",
fill = "Method",
y = "Bias")
p
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(devtools)
load_all()
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/gfmla_nonlinear_2_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
# true estimands
g <- c(0, 0.25, 0.5, -0.5, 1)          # outcome model parameters
a <- seq(-1, 2, length = 20)           # exposure value of interest
EYa.true <- g[1] + 0.5*g[5] + a*g[2] + a^2*g[3] + a^3*g[4]
# number of sims per setting
n.rep <- nrow(sim.out) / n_distinct(dplyr::select(sim.out, n, B, vare))
# make long data frame
sim.out.long <- sim.out %>%
dplyr::select(!starts_with("a")) %>%
pivot_longer(cols = starts_with("OG") | starts_with("NG") | starts_with("CG"),
names_to = "method.aa",
values_to = "val") %>%
mutate(method = factor(substr(method.aa, 1, 2),
levels = c("OG", "NG", "CG"),
labels = c("Oracle G-Formula",
"Naive G-Formula",
"G-Formula CS")),
aa = as.numeric(gsub("[.]", "", substr(method.aa, 4, 5))),
a = a[aa],
EYa.true = EYa.true[aa]) %>%
dplyr::select(-method.aa)
# make summary data frame
sim.out.summary <- sim.out.long %>%
group_by(n, vare, B, method, a) %>%
summarise(bias = mean(val - EYa.true),
se = sd(val) / sqrt(n.rep),
bias.lower = bias - qnorm(0.975) * se,
bias.upper = bias + qnorm(0.975) * se)
# summarize proportion of missing data by setting
sim.out.long %>%
filter(aa == 1) %>%
group_by(method, n, B, vare) %>%
summarise(prop.error = mean(is.na(val))) %>%
filter(prop.error > 0) %>%
ungroup()
p <- sim.out.summary %>%
ggplot(
aes(x = a,
y = bias,
ymin = bias.lower,
ymax = bias.upper)) +
geom_point() +
geom_line() +
facet_grid(n ~ method,
labeller = labeller(n = function(x) paste0("n = ", x)))
p <- sim.out.summary %>%
ggplot(
aes(x = a,
y = bias,
ymin = bias.lower,
ymax = bias.upper)) +
geom_point() +
geom_line() +
facet_grid(n ~ method,
labeller = labeller(n = function(x) paste0("n = ", x))) +
theme_bw() +
theme(legend.position = c(0.2, 0.3)) +
labs(color = "Method",
shape = "Method",
fill = "Method",
y = "Bias")
p
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(kableExtra)
library(devtools)
load_all()
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/gfmla_bige_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
# true estimands
g <- c(-2, 0.7, -0.6, 0.4, -0.4, -0.2)          # outcome model parameters
a <- 3                                      # exposure value of interest
EYa.true <- 0.4 * inv.logit(-2 + 0.7 * a) +     # true dose response curve at a
0.4 * inv.logit(-2.6 + 0.3 * a) +
0.1 * inv.logit(-1.6 + 0.5 * a) +
0.1 * inv.logit(-2.2 + 0.1 * a)
# number of sims per setting
n.rep <- nrow(sim.out) / n_distinct(dplyr::select(sim.out, n, B, vare))
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("est") |
starts_with("ste") |
starts_with("bcs"),
names_to = "method.aa",
values_to = "val") %>%
mutate(method = factor(substr(method.aa, 5, 6),
levels = c("OG", "NG", "CG"),
labels = c("Oracle G-Formula",
"Naive G-Formula",
"Corrected G-Formula")),
aa = factor(substr(method.aa, 8, 8)),
a = factor(a[aa]),
name = factor(substr(method.aa, 1, 3)),
EYa.true = EYa.true[aa]) %>%
dplyr::select(-method.aa) %>%
group_by(clust, n, B, vare, method, aa, a, name) %>%
mutate(id = row_number()) %>%
pivot_wider(names_from = name,
values_from = val,
id_cols = c(clust, n, B, vare, method, aa, a, EYa.true, id)) %>%
mutate(ci.lower = est - qnorm(0.975) * ste,
ci.upper = est + qnorm(0.975) * ste,
ci.cov = EYa.true >= ci.lower & EYa.true <= ci.upper,
bcci.lower = est - qnorm(0.975) * bcs,
bcci.upper = est + qnorm(0.975) * bcs,
bcci.cov = EYa.true >= bcci.lower & EYa.true <= bcci.upper)
# summarize proportion of missing data by setting
ftc.dat <- sim.out.long %>%
filter(aa == 1) %>%
group_by(method, n, B, vare) %>%
summarise(prop.error = mean(is.na(est)))
ftc.dat %>%
filter(prop.error > 0) %>%
ungroup()
# extract simulation parameters
n <- unique(sim.out$n)
# make labels for plots
method.labs <- c("Oracle G-Formula",
"Naive G-Formula",
"G-Formula CS")
names(method.labs) <- c("OG", "NG", "CG")
n.labs <- paste0("n = ", n)
names(n.labs) <- n
a.labs <- paste0("a = ", a)
names(a.labs) <- a
# colorblind friendly pallette
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# create plots
make.plot <- function(title = T) {
plot <- sim.out.long %>%
ggplot(aes(group = vare,
y = est)) +
geom_boxplot() +
geom_hline(aes(yintercept = EYa.true),
linetype = "dashed",
color = "orange") +
facet_grid(n ~ method,
scales = "free",
labeller = labeller(n = n.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
theme_bw() +
theme(legend.position = "bottom") +
scale_fill_manual(values = pal_light,
labels = method.labs) +
scale_color_manual(values = pal_dark,
labels = method.labs)
if (title) {
plot <- plot +
ggtitle(paste0("Empirical Distribution of Parameter Estimates"),
subtitle = paste0(n.rep, " simulations per setting"))
}
return(plot)
}
# create plots
make.plot.2 <- function(title = T) {
plot <- sim.out.long %>%
group_by(vare, n, method) %>%
summarise(mean = mean(est, na.rm = T),
se = sd(est, na.rm = T)) %>%
mutate(lower = mean - se,
upper = mean + se) %>%
ggplot(aes(x = vare,
y = mean,
ymin = lower,
ymax = upper)) +
geom_line() +
geom_linerange() +
geom_hline(aes(yintercept = EYa.true),
linetype = "dashed",
color = "orange") +
facet_grid(n ~ method,
scales = "free",
labeller = labeller(n = n.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
theme_bw() +
theme(legend.position = "bottom") +
scale_fill_manual(values = pal_light,
labels = method.labs) +
scale_color_manual(values = pal_dark,
labels = method.labs)
if (title) {
plot <- plot +
ggtitle(paste0("Empirical Distribution of Parameter Estimates"),
subtitle = paste0(n.rep, " simulations per setting"))
}
return(plot)
}
make.plot()
