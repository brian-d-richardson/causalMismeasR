ifelse(ps == 0 & out == 1, "PS",
ifelse(ps == 1 & out == 0, "OR", ""))),
levels = c("PS and OR", "PS", "OR", "")),
ps = factor(ps,
levels = c(0, 1),
labels = c("PS Correct", "PS Incorrect")),
out = factor(out,
levels = c(0, 1),
labels = c("Outcome Correct", "Outcome Incorrect")))
# number of sims per setting
n.rep <- nrow(sim.out) /
n_distinct(dplyr::select(sim.out, n, method, type, ps, out))
View(sim.out.list)
View(sim.out)
library(MASS); library(devtools); load_all()
n = 2000; vare = 0.0001; B = 2; seed = 1;
n = 10000
mc.seed <- 123                                # MCCS seed
cov.e <- vare                                 # var(epsilon)
inv.link <- inv.ident                         # inverse link
d.inv.link <- d.inv.ident                     # deriv of inv link
g <- c(1.5, 0.7, 0.9, -0.6, -0.7, 0.4)        # outcome model parameters
formula <- "~A*L1 + A*L2"                     # outcome model formula
ps.formula <- "~L1 + L2"                      # propensity score model formula
ipw.formula <- "~A"                           # ipw.formula
formula.inc <- "~A*L2"                        # incorrect outcome model
ps.formula.inc <- "~L2"                       # incorrect propensity score model
# according to DGP #3 in Blette submission
set.seed(seed)
L1 <- rbinom(n, 1, 0.5)                                  # confounder 1
L2 <- rnorm(n, 1, sqrt(0.5))                             # confounder 2
A <- rnorm(n, 2 + 0.9*L1 - 0.6*L2, sqrt(1.1))            # exposure
a <- seq(min(A), max(A), length = 4)                     # grid of exposures
EY <- inv.link(model.matrix(as.formula(formula)) %*% g)  # mean of outcome
Y <- rnorm(n, EY, sqrt(0.16))                               # outcome
Astar <- A + rnorm(n, 0, sqrt(cov.e))                    # mismeasured A
dat0 <- data.frame(Y, A, L1, L2)                         # oracle data
datstar <- data.frame(Y, A = Astar, L1, L2)              # mismeasured data
args <- list(formula = formula,                          # arguments for fitting
ps.formula = ps.formula,
inv.link = inv.link,
d.inv.link = d.inv.link)
# return estimates and std errors of MSM coefficient for a
get.est.se.a <- function(res, res.list) {
name <- strsplit(res, "[.]")[[1]]
# for IPW, extract estimate and std error for coefficient of a
if (name[1] == "ipw") {
est <- unname(res.list[[res]]$est[2])
se <- sqrt(diag(res.list[[res]]$var)[2])
bse <- sqrt(diag(res.list[[res]]$bc.var)[2])
# for g-fmla and double robust, use delta method on E{Y(1)}, E{Y(0)}
} else {
est <- diff(tail(unname(res.list[[res]]$est), 2))
vec <- numeric(length(res.list[[res]]$est))
vec[(length(vec)-1):length(vec)] <- c(1, -1)
se <- sqrt(vec %*% res.list[[res]]$var %*% vec)
bse <- sqrt(vec %*% res.list[[res]]$bc.var %*% vec)
}
c(method = name[1],
type = name[2],
est = est,
se = se,
bse = bse)
}
# g-formula
gfmla.args <- list(formula = formula,
inv.link = inv.link,
d.inv.link = d.inv.link)
fit.gfmla(
data = datstar, args = gfmla.args, a = c(0, 1))
# ipw
ipw.args <- list(formula = ipw.formula,
ps.formula = ps.formula,
inv.link = inv.link,
d.inv.link = d.inv.link)
res.list[["ipw.naive"]] <- fit.ipw(
data = datstar, args = ipw.args,
start = res.list[["gfmla.naive"]]$est[1:2])
# store results in list
res.list = list()
# length of outcome model params
len.out <- ncol(model.matrix(as.formula(formula), data = dat0))
# ipw
ipw.args <- list(formula = ipw.formula,
ps.formula = ps.formula,
inv.link = inv.link,
d.inv.link = d.inv.link)
res.list[["ipw.naive"]] <- fit.ipw(
data = datstar, args = ipw.args,
start = res.list[["gfmla.naive"]]$est[1:2])
res.list[["ipw.oracle"]] <- fit.ipw(
data = dat0, args = ipw.args,
start = res.list[["ipw.naive"]]$est[1:2])
res.list[["ipw.oracle"]]
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(devtools)
load_all()
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/gfmla2_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
# true estimands
g <- c(-2, 0.7, -0.6, 0.4, -0.4, -0.2)          # outcome model parameters
a <- as.numeric(select(                         # exposure value of interest
sim.out, starts_with("a"))[1,])
EYa.true <- 0.4 * inv.logit(-2 + 0.7 * a) +     # true dose response curve at a
0.4 * inv.logit(-2.6 + 0.3 * a) +
0.1 * inv.logit(-1.6 + 0.5 * a) +
0.1 * inv.logit(-2.2 + 0.1 * a)
# number of sims per setting
n.rep <- nrow(sim.out) / n_distinct(dplyr::select(sim.out, n, B, vare))
# make long data frame
sim.out.long <- sim.out %>%
dplyr::select(!starts_with("a")) %>%
pivot_longer(cols = starts_with("OG") | starts_with("NG") | starts_with("CG"),
names_to = "method.aa",
values_to = "val") %>%
mutate(method = factor(substr(method.aa, 1, 2),
levels = c("OG", "NG", "CG"),
labels = c("Oracle G-Formula",
"Naive G-Formula",
"Corrected G-Formula")),
aa = as.numeric(gsub("[.]", "", substr(method.aa, 4, 5))),
a = a[aa],
EYa.true = EYa.true[aa]) %>%
dplyr::select(-method.aa)
# make summary data frame
sim.out.summary <- sim.out.long %>%
group_by(n, vare, B, method, a) %>%
summarise(bias = mean(val - EYa.true),
se = sd(val) / sqrt(n.rep),
bias.lower = bias - qnorm(0.975) * se,
bias.upper = bias + qnorm(0.975) * se)
# summarize proportion of missing data by setting
sim.out.long %>%
filter(aa == 1) %>%
group_by(method, n, B, vare) %>%
summarise(prop.error = mean(is.na(val))) %>%
filter(prop.error > 0) %>%
ungroup()
p <- sim.out.summary %>%
ggplot(
aes(x = a,
y = bias,
ymin = bias.lower,
ymax = bias.upper)) +
geom_point() +
geom_line() +
geom_ribbon(alpha = 0.2) +
geom_hline(yintercept = 0,
linetype = "dashed") +
facet_grid() +
theme_bw() +
theme(legend.position = c(0.2, 0.3)) +
labs(color = "Method",
shape = "Method",
fill = "Method",
y = "Bias")
p
p <- sim.out.summary %>%
ggplot(
aes(x = a,
y = bias,
ymin = bias.lower,
ymax = bias.upper)) +
geom_point() +
geom_line() +
geom_ribbon(alpha = 0.2) +
geom_hline(yintercept = 0,
linetype = "dashed") +
facet_grid(~ method) +
theme_bw() +
theme(legend.position = c(0.2, 0.3)) +
labs(color = "Method",
shape = "Method",
fill = "Method",
y = "Bias")
p
View(sim.out.summary)
p <- sim.out.summary %>%
ggplot(
aes(x = a,
y = bias,
ymin = bias.lower,
ymax = bias.upper)) +
#geom_point() +
geom_line() +
geom_ribbon(alpha = 0.2) +
geom_hline(yintercept = 0,
linetype = "dashed") +
facet_grid(~ method) +
theme_bw() +
theme(legend.position = c(0.2, 0.3)) +
labs(color = "Method",
shape = "Method",
fill = "Method",
y = "Bias")
p
p <- sim.out.summary %>%
ggplot(
aes(x = a,
y = bias,
ymin = bias.lower,
ymax = bias.upper)) +
#geom_point() +
geom_line() +
geom_ribbon(alpha = 0.5) +
geom_hline(yintercept = 0,
linetype = "dashed") +
facet_grid(~ method) +
theme_bw() +
theme(legend.position = c(0.2, 0.3)) +
labs(color = "Method",
shape = "Method",
fill = "Method",
y = "Bias")
p
p <- sim.out.summary %>%
ggplot(
aes(x = a,
y = bias,
ymin = bias.lower,
ymax = bias.upper)) +
geom_point() +
geom_line() +
geom_hline(yintercept = 0,
linetype = "dashed") +
facet_grid(~ method) +
theme_bw() +
theme(legend.position = c(0.2, 0.3)) +
labs(color = "Method",
shape = "Method",
fill = "Method",
y = "Bias")
p
p <- sim.out.summary %>%
ggplot(
aes(x = a,
y = bias,
ymin = bias.lower,
ymax = bias.upper)) +
geom_point() +
geom_line() +
facet_grid(~ method) +
theme_bw() +
theme(legend.position = c(0.2, 0.3)) +
labs(color = "Method",
shape = "Method",
fill = "Method",
y = "Bias")
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(devtools)
load_all()
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/gfmla2_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
# true estimands
g <- c(-2, 0.7, -0.6, 0.4, -0.4, -0.2)          # outcome model parameters
a <- as.numeric(select(                         # exposure value of interest
sim.out, starts_with("a"))[1,])
EYa.true <- 0.4 * inv.logit(-2 + 0.7 * a) +     # true dose response curve at a
0.4 * inv.logit(-2.6 + 0.3 * a) +
0.1 * inv.logit(-1.6 + 0.5 * a) +
0.1 * inv.logit(-2.2 + 0.1 * a)
# number of sims per setting
n.rep <- nrow(sim.out) / n_distinct(dplyr::select(sim.out, n, B, vare))
# make long data frame
sim.out.long <- sim.out %>%
dplyr::select(!starts_with("a")) %>%
pivot_longer(cols = starts_with("OG") | starts_with("NG") | starts_with("CG"),
names_to = "method.aa",
values_to = "val") %>%
mutate(method = factor(substr(method.aa, 1, 2),
levels = c("OG", "NG", "CG"),
labels = c("Oracle",
"Naive",
"CS")),
aa = as.numeric(gsub("[.]", "", substr(method.aa, 4, 5))),
a = a[aa],
EYa.true = EYa.true[aa]) %>%
dplyr::select(-method.aa)
# make summary data frame
sim.out.summary <- sim.out.long %>%
group_by(n, vare, B, method, a) %>%
summarise(bias = mean(val - EYa.true),
se = sd(val) / sqrt(n.rep),
bias.lower = bias - qnorm(0.975) * se,
bias.upper = bias + qnorm(0.975) * se)
# summarize proportion of missing data by setting
sim.out.long %>%
filter(aa == 1) %>%
group_by(method, n, B, vare) %>%
summarise(prop.error = mean(is.na(val))) %>%
filter(prop.error > 0) %>%
ungroup()
p <- sim.out.summary %>%
ggplot(
aes(x = a,
y = bias,
ymin = bias.lower,
ymax = bias.upper)) +
geom_point() +
geom_line() +
facet_grid(~ method) +
theme_bw() +
theme(legend.position = c(0.2, 0.3)) +
labs(color = "Method",
shape = "Method",
fill = "Method",
y = "Bias")
p
# save plot
ggsave("sim_figures/gfmla_sim_plot.png",
width = 6,
height = 4,
dpi = 300)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(devtools)
load_all()
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/gfmla2_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
# true estimands
g <- c(-2, 0.7, -0.6, 0.4, -0.4, -0.2)          # outcome model parameters
a <- as.numeric(select(                         # exposure value of interest
sim.out, starts_with("a"))[1,])
EYa.true <- 0.4 * inv.logit(-2 + 0.7 * a) +     # true dose response curve at a
0.4 * inv.logit(-2.6 + 0.3 * a) +
0.1 * inv.logit(-1.6 + 0.5 * a) +
0.1 * inv.logit(-2.2 + 0.1 * a)
# number of sims per setting
n.rep <- nrow(sim.out) / n_distinct(dplyr::select(sim.out, n, B, vare))
# make long data frame
sim.out.long <- sim.out %>%
dplyr::select(!starts_with("a")) %>%
pivot_longer(cols = starts_with("OG") | starts_with("NG") | starts_with("CG"),
names_to = "method.aa",
values_to = "val") %>%
mutate(method = factor(substr(method.aa, 1, 2),
levels = c("OG", "NG", "CG"),
labels = c("Oracle G-Formula",
"Naive G-Formula",
"G-Formula CS")),
aa = as.numeric(gsub("[.]", "", substr(method.aa, 4, 5))),
a = a[aa],
EYa.true = EYa.true[aa]) %>%
dplyr::select(-method.aa)
# make summary data frame
sim.out.summary <- sim.out.long %>%
group_by(n, vare, B, method, a) %>%
summarise(bias = mean(val - EYa.true),
se = sd(val) / sqrt(n.rep),
bias.lower = bias - qnorm(0.975) * se,
bias.upper = bias + qnorm(0.975) * se)
# summarize proportion of missing data by setting
sim.out.long %>%
filter(aa == 1) %>%
group_by(method, n, B, vare) %>%
summarise(prop.error = mean(is.na(val))) %>%
filter(prop.error > 0) %>%
ungroup()
# save plot
ggsave("sim_figures/gfmla_sim_plot.png",
width = 6,
height = 4,
dpi = 300)
p
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(devtools)
load_all()
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/gfmla2_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
# true estimands
g <- c(-2, 0.7, -0.6, 0.4, -0.4, -0.2)          # outcome model parameters
a <- as.numeric(select(                         # exposure value of interest
sim.out, starts_with("a"))[1,])
EYa.true <- 0.4 * inv.logit(-2 + 0.7 * a) +     # true dose response curve at a
0.4 * inv.logit(-2.6 + 0.3 * a) +
0.1 * inv.logit(-1.6 + 0.5 * a) +
0.1 * inv.logit(-2.2 + 0.1 * a)
# number of sims per setting
n.rep <- nrow(sim.out) / n_distinct(dplyr::select(sim.out, n, B, vare))
# make long data frame
sim.out.long <- sim.out %>%
dplyr::select(!starts_with("a")) %>%
pivot_longer(cols = starts_with("OG") | starts_with("NG") | starts_with("CG"),
names_to = "method.aa",
values_to = "val") %>%
mutate(method = factor(substr(method.aa, 1, 2),
levels = c("OG", "NG", "CG"),
labels = c("Oracle G-Formula",
"Naive G-Formula",
"G-Formula CS")),
aa = as.numeric(gsub("[.]", "", substr(method.aa, 4, 5))),
a = a[aa],
EYa.true = EYa.true[aa]) %>%
dplyr::select(-method.aa)
# make summary data frame
sim.out.summary <- sim.out.long %>%
group_by(n, vare, B, method, a) %>%
summarise(bias = mean(val - EYa.true),
se = sd(val) / sqrt(n.rep),
bias.lower = bias - qnorm(0.975) * se,
bias.upper = bias + qnorm(0.975) * se)
# summarize proportion of missing data by setting
sim.out.long %>%
filter(aa == 1) %>%
group_by(method, n, B, vare) %>%
summarise(prop.error = mean(is.na(val))) %>%
filter(prop.error > 0) %>%
ungroup()
p
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(devtools)
load_all()
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/gfmla2_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
# true estimands
g <- c(-2, 0.7, -0.6, 0.4, -0.4, -0.2)          # outcome model parameters
a <- as.numeric(select(                         # exposure value of interest
sim.out, starts_with("a"))[1,])
EYa.true <- 0.4 * inv.logit(-2 + 0.7 * a) +     # true dose response curve at a
0.4 * inv.logit(-2.6 + 0.3 * a) +
0.1 * inv.logit(-1.6 + 0.5 * a) +
0.1 * inv.logit(-2.2 + 0.1 * a)
# number of sims per setting
n.rep <- nrow(sim.out) / n_distinct(dplyr::select(sim.out, n, B, vare))
# make long data frame
sim.out.long <- sim.out %>%
dplyr::select(!starts_with("a")) %>%
pivot_longer(cols = starts_with("OG") | starts_with("NG") | starts_with("CG"),
names_to = "method.aa",
values_to = "val") %>%
mutate(method = factor(substr(method.aa, 1, 2),
levels = c("OG", "NG", "CG"),
labels = c("Oracle G-Formula",
"Naive G-Formula",
"G-Formula CS")),
aa = as.numeric(gsub("[.]", "", substr(method.aa, 4, 5))),
a = a[aa],
EYa.true = EYa.true[aa]) %>%
dplyr::select(-method.aa)
# make summary data frame
sim.out.summary <- sim.out.long %>%
group_by(n, vare, B, method, a) %>%
summarise(bias = mean(val - EYa.true),
se = sd(val) / sqrt(n.rep),
bias.lower = bias - qnorm(0.975) * se,
bias.upper = bias + qnorm(0.975) * se)
# summarize proportion of missing data by setting
sim.out.long %>%
filter(aa == 1) %>%
group_by(method, n, B, vare) %>%
summarise(prop.error = mean(is.na(val))) %>%
filter(prop.error > 0) %>%
ungroup()
