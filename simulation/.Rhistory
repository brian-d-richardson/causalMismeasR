library(devtools)
load_all()
# true estimand
g <- 0.75
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/dr_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list) %>%
mutate(g.true = g,
ci.lower = est - qnorm(0.975) * se,
ci.upper = est + qnorm(0.975) * se,
ci.cov = g.true >= ci.lower & g.true <= ci.upper,
method = factor(method,
levels = c("gfmla", "ipw", "dr"),
labels = c("G-Formula", "IPW", "Doubly Robust")),
type = factor(type,
levels = c("oracle", "naive", "mccs"),
labels = c("Oracle", "Naive", "MCCS")),
spec = factor(ifelse(ps == 0 & out == 0, "PS and OR",
ifelse(ps == 0 & out == 1, "PS",
ifelse(ps == 1 & out == 0, "OR", ""))),
levels = c("PS and OR", "PS", "OR")),
ps = factor(ps,
levels = c(0, 1),
labels = c("PS Correct", "PS Incorrect")),
out = factor(out,
levels = c(0, 1),
labels = c("Outcome Correct", "Outcome Incorrect")))
# number of sims per setting
n.rep <- nrow(sim.out) /
n_distinct(dplyr::select(sim.out, method, type, ps, out))
# summarize proportion of missing data by setting
sim.out %>%
group_by(method, type, ps, out) %>%
summarise(prop.error = mean(is.na(est))) %>%
filter(prop.error > 0) %>%
ungroup()
# colorblind friendly pallette
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# separate plots for each sample size
make.plot <- function() {
sim.out %>%
ggplot(aes(x = type,
y = est,
fill = type,
color = type)) +
geom_boxplot() +
geom_hline(yintercept = g,
linetype = "dashed",
color = "orange") +
facet_grid(method ~ ps + out, scales = "free") +
labs(y = "Parameter Estimate",
fill = "Type",
color = "Type") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates"),
subtitle = paste0(n.rep, " simulations per setting")) +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank()) +
scale_fill_manual(values = pal_light) +
scale_color_manual(values = pal_dark)
}
make.plot()
tbl <- sim.out %>%
group_by(method, type, spec) %>%
summarise(bias = mean(est - g, na.rm = T),
emp.se = sd(est, na.rm = T),
est.se = mean(se, na.rm = T),
ci.cov = mean(ci.cov, na.rm = T))
tbl %>%
kable(digits = 3,
col.names = c("Method", "Type", "Correct Specifications",
"Bias", "ESE", "ASE", "CI Coverage"),
caption = "Estimated MSM Slope") %>%
kable_styling("striped")
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(kableExtra)
library(devtools)
load_all()
# true estimand
g <- 0.75
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/dr_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list) %>%
mutate(g.true = g,
ci.lower = est - qnorm(0.975) * se,
ci.upper = est + qnorm(0.975) * se,
ci.cov = g.true >= ci.lower & g.true <= ci.upper,
method = factor(method,
levels = c("gfmla", "ipw", "dr"),
labels = c("G-Formula", "IPW", "Doubly Robust")),
type = factor(type,
levels = c("oracle", "naive", "mccs"),
labels = c("Oracle", "Naive", "MCCS")),
spec = factor(ifelse(ps == 0 & out == 0, "PS and OR",
ifelse(ps == 0 & out == 1, "PS",
ifelse(ps == 1 & out == 0, "OR", ""))),
levels = c("PS and OR", "PS", "OR", "")),
ps = factor(ps,
levels = c(0, 1),
labels = c("PS Correct", "PS Incorrect")),
out = factor(out,
levels = c(0, 1),
labels = c("Outcome Correct", "Outcome Incorrect")))
# number of sims per setting
n.rep <- nrow(sim.out) /
n_distinct(dplyr::select(sim.out, method, type, ps, out))
# summarize proportion of missing data by setting
sim.out %>%
group_by(method, type, ps, out) %>%
summarise(prop.error = mean(is.na(est))) %>%
filter(prop.error > 0) %>%
ungroup()
# colorblind friendly pallette
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# separate plots for each sample size
make.plot <- function() {
sim.out %>%
ggplot(aes(x = type,
y = est,
fill = type,
color = type)) +
geom_boxplot() +
geom_hline(yintercept = g,
linetype = "dashed",
color = "orange") +
facet_grid(method ~ ps + out, scales = "free") +
labs(y = "Parameter Estimate",
fill = "Type",
color = "Type") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates"),
subtitle = paste0(n.rep, " simulations per setting")) +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank()) +
scale_fill_manual(values = pal_light) +
scale_color_manual(values = pal_dark)
}
make.plot()
tbl <- sim.out %>%
group_by(method, type, spec) %>%
summarise(bias = mean(est - g, na.rm = T),
emp.se = sd(est, na.rm = T),
est.se = mean(se, na.rm = T),
ci.cov = mean(ci.cov, na.rm = T))
tbl %>%
kable(digits = 3,
col.names = c("Method", "Type", "Correct Specifications",
"Bias", "ESE", "ASE", "CI Coverage"),
caption = "Estimated MSM Slope") %>%
kable_styling("striped")
View(sim.out.list)
View(sim.out)
tbl2 <- sim.out %>%
filter(type == "MCCS") %>%
mutate(Estimator = paste0("CS ", method)) %>%
group_by(Estimator, spec) %>%
summarise(bias = mean(est - g, na.rm = T),
emp.se = sd(est, na.rm = T),
est.se = mean(se, na.rm = T),
ci.cov = mean(ci.cov, na.rm = T))
tbl %>%
kable(digits = 3,
col.names = c("Method", "Type", "Correct Specifications",
"Bias", "ESE", "ASE", "CI Coverage"),
caption = "Estimated MSM Slope") %>%
kable_styling("striped")
tbl %>%
kable(digits = 3,
col.names = c("Estimator", "Correct Specifications",
"Bias", "ESE", "ASE", "CI Coverage"),
caption = "Estimated MSM Slope") %>%
kable_styling("striped")
tbl2 <- sim.out %>%
filter(type == "MCCS") %>%
mutate(Estimator = paste0("CS ", method)) %>%
group_by(Estimator, spec) %>%
summarise(bias = mean(est - g, na.rm = T),
emp.se = sd(est, na.rm = T),
est.se = mean(se, na.rm = T),
ci.cov = mean(ci.cov, na.rm = T))
tbl %>%
kable(digits = 3,
col.names = c("Estimator", "Correct Specifications",
"Bias", "ESE", "ASE", "CI Coverage"),
caption = "Estimated MSM Slope") %>%
kable_styling("striped")
tbl2 %>%
kable(digits = 3,
col.names = c("Estimator", "Correct Specifications",
"Bias", "ESE", "ASE", "CI Coverage"),
caption = "Estimated MSM Slope") %>%
kable_styling("striped")
tbl2 %>%
kable(digits = 3,
col.names = c("Estimator", "Correct Specifications",
"Bias", "ESE", "ASE", "Cov"),
caption = "Estimated MSM Slope") %>%
kable_styling("striped")
View(tbl2)
tbl2 <- sim.out %>%
filter(type == "MCCS") %>%
mutate(Estimator = paste0("CS ", method)) %>%
group_by(spec, Estimator) %>%
summarise(bias = mean(est - g, na.rm = T),
emp.se = sd(est, na.rm = T),
est.se = mean(se, na.rm = T),
ci.cov = mean(ci.cov, na.rm = T))
tbl2 %>%
kable(format = "latex",
digits = 1,
align = c(rep("c", 2),
rep("r", 4)),
booktabs = TRUE,
linesep = c("", "", "", "\\addlinespace"),
escape = FALSE,
col.names = c("Estimator", "Correct Specifications",
"Bias", "ESE", "ASE", "Cov")) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
kbl2 <- tbl2 %>%
kable(format = "latex",
digits = 1,
align = c(rep("c", 2),
rep("r", 4)),
booktabs = TRUE,
linesep = c("", "", "", "\\addlinespace"),
escape = FALSE,
col.names = c("Estimator", "Correct Specifications",
"Bias", "ESE", "ASE", "Cov")) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
kbl2
tbl2 <- sim.out %>%
filter(type == "MCCS") %>%
mutate(Estimator = paste0("CS ", method)) %>%
group_by(spec, Estimator) %>%
summarise(bias = 100 * mean(est - g, na.rm = T),
emp.se = 100 * sd(est, na.rm = T),
est.se = 100 * mean(se, na.rm = T),
ci.cov = 100 * mean(ci.cov, na.rm = T))
kbl2
tbl2 <- sim.out %>%
filter(type == "MCCS") %>%
mutate(Estimator = paste0("CS ", method)) %>%
group_by(spec, Estimator) %>%
summarise(bias = 100 * mean(est - g, na.rm = T),
emp.se = 100 * sd(est, na.rm = T),
est.se = 100 * mean(se, na.rm = T),
ci.cov = 100 * mean(ci.cov, na.rm = T))
kbl
kbl2
tbl2 <- sim.out %>%
filter(type == "MCCS") %>%
mutate(Estimator = paste0("CS ", method)) %>%
group_by(spec, Estimator) %>%
summarise(bias = 100 * mean(est - g, na.rm = T),
emp.se = 100 * sd(est, na.rm = T),
est.se = 100 * mean(se, na.rm = T),
ci.cov = 100 * mean(ci.cov, na.rm = T))
kbl2 <- tbl2 %>%
kable(format = "latex",
digits = 1,
align = c(rep("c", 2),
rep("r", 4)),
booktabs = TRUE,
linesep = c("", "", "", "\\addlinespace"),
escape = FALSE,
col.names = c("Estimator", "Correct Specifications",
"Bias", "ESE", "ASE", "Cov")) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
kbl2
kbl2 <- tbl2 %>%
kable(format = "latex",
digits = 1,
align = c(rep("c", 2),
rep("r", 4)),
booktabs = TRUE,
linesep = c("", "", "\\addlinespace\\hline"),
escape = FALSE,
col.names = c("Estimator", "Correct Specifications",
"Bias", "ESE", "ASE", "Cov")) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
kbl2
kbl2 <- tbl2 %>%
kable(format = "latex",
digits = 1,
align = c(rep("c", 2),
rep("r", 4)),
booktabs = TRUE,
linesep = c("", "", "\\addlinespace\\hline"),
escape = FALSE,
col.names = c("Correct Specifications", "Estimator",
"Bias", "ESE", "ASE", "Cov")) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
kbl2
"DR CS")) %>%
tbl2 <- sim.out %>%
filter(type == "MCCS") %>%
mutate(Estimator = factor(paste0(gsub("Doubly Robust", "DR", method),
"CS "),
levels = c("G-Formula CS",
"IPW CS",
"DR CS"))) %>%
group_by(spec, Estimator) %>%
summarise(bias = 100 * mean(est - g, na.rm = T),
emp.se = 100 * sd(est, na.rm = T),
est.se = 100 * mean(se, na.rm = T),
ci.cov = 100 * mean(ci.cov, na.rm = T))
tbl2 <- sim.out %>%
filter(type == "MCCS") %>%
mutate(Estimator = factor(paste0(gsub("Doubly Robust", "DR", method),
" CS"),
levels = c("G-Formula CS",
"IPW CS",
"DR CS"))) %>%
group_by(spec, Estimator) %>%
summarise(bias = 100 * mean(est - g, na.rm = T),
emp.se = 100 * sd(est, na.rm = T),
est.se = 100 * mean(se, na.rm = T),
ci.cov = 100 * mean(ci.cov, na.rm = T))
kbl2 <- tbl2 %>%
kable(format = "latex",
digits = 1,
align = c(rep("c", 2),
rep("r", 4)),
booktabs = TRUE,
linesep = c("", "", "\\addlinespace\\hline"),
escape = FALSE,
col.names = c("Correct Specifications", "Estimator",
"Bias", "ESE", "ASE", "Cov")) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
kbl2
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(kableExtra)
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/ipw_cc_data/v2/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
# true MSM parameters
g <- c(0.45, 0.20, 0.15, 0.15)
# number of sims per setting
n.rep <- nrow(sim.out) / n_distinct(dplyr::select(sim.out, n, B, vare))
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("ghat") | starts_with("stde"),
names_to = "method.param",
values_to = "val") %>%
mutate(method = factor(substr(method.param, 6, 7),
levels = c("OL", "OI",
"NL", "NI",
"CL", "CI"),
labels = c("Oracle Regression",
"Oracle IPW",
"Naive Regression",
"Naive IPW",
"Corrected Regression",
"Corrected IPW")),
param = factor(substr(method.param, 9, 9)),
name = factor(substr(method.param, 1, 4)),
g.true = g[param]) %>%
dplyr::select(-method.param) %>%
group_by(clust, n, B, vare, pi.cc, method, param, name) %>%
mutate(id = row_number()) %>%
pivot_wider(names_from = name,
values_from = val,
id_cols = c(clust, n, B, vare, pi.cc, method,
param, g.true, id)) %>%
mutate(ci.lower = ghat - qnorm(0.975) * stde,
ci.upper = ghat + qnorm(0.975) * stde,
ci.cov = g.true >= ci.lower & g.true <= ci.upper)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(kableExtra)
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/ipw_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
# true MSM parameters
g <- c(0.45, 0.20, 0.15, 0.15)
# number of sims per setting
n.rep <- nrow(sim.out) / n_distinct(dplyr::select(sim.out, n, B, vare))
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("ghat") | starts_with("stde"),
names_to = "method.param",
values_to = "val") %>%
mutate(method = factor(substr(method.param, 6, 7),
levels = c("OL", "OI",
"NL", "NI",
"CL", "CI"),
labels = c("Oracle Regression",
"Oracle IPW",
"Naive Regression",
"Naive IPW",
"Corrected Regression",
"Corrected IPW")),
param = factor(substr(method.param, 9, 9)),
name = factor(substr(method.param, 1, 4)),
g.true = g[param]) %>%
dplyr::select(-method.param) %>%
group_by(clust, n, B, vare, method, param, name) %>%
mutate(id = row_number()) %>%
pivot_wider(names_from = name,
values_from = val,
id_cols = c(clust, n, B, vare, method,
param, g.true, id)) %>%
mutate(ci.lower = ghat - qnorm(0.975) * stde,
ci.upper = ghat + qnorm(0.975) * stde,
ci.cov = g.true >= ci.lower & g.true <= ci.upper)
View(sim.out)
# summarize proportion of missing data by setting
sim.out.long %>%
filter(param == 1) %>%
group_by(method, n) %>%
summarise(prop.error = mean(is.na(ghat))) %>%
filter(prop.error > 0) %>%
ungroup()
# extract simulation parameters
n <- unique(sim.out$n)
# make labels for plots
n.labs <- paste0("n = ", n)
names(n.labs) <- n
param.labs <- paste0("\u03b3", c("0", "1", "2", "3"))
names(param.labs) <- 1:4
# colorblind friendly pallette
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# create plots
make.plot <- function(title = T) {
plot <- ggplot(
data = sim.out.long,
aes(x = method,
y = ghat,
fill = method,
color = method)) +
geom_boxplot() +
stat_summary(fun = mean,
geom = "point",
shape = 8,
size = 2,
orientation = "x",
show.legend = F) +
geom_hline(aes(yintercept = g.true),
linetype = "dashed",
color = "orange") +
facet_grid(n ~ param,
scales = "free",
labeller = labeller(n = n.labs,
param = param.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
legend.position = "bottom") +
scale_fill_manual(values = pal_light) +
scale_color_manual(values = pal_dark)
if (title) {
plot <- plot +
ggtitle(paste0("Empirical Distribution of Parameter Estimates"),
subtitle = paste0(n.rep, " simulations per setting"))
}
return(plot)
}
make.plot()
