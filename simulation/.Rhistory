# separate plots for each sample size
plot.by.a <- function(a.,
method. = names(method.labs),
n. = n,
vare. = vare,
est_cutoff = Inf) {
# data for plot
plot.dat <- sim.out.long %>%
filter(a == a.,
method %in% method.,
n %in% n.,
vare %in% vare.) %>%
mutate(remove = abs(est - EYa.true) > est_cutoff,
lab.y = 0.55*(est_cutoff - EYa.true))
# count removed observations
remove.dat <- plot.dat %>%
group_by(method, n, B, vare, lab.y, EYa.true) %>%
summarise(n.remove = sum(remove, na.rm = T)) %>%
mutate(label = ifelse(n.remove > 0,
paste0(n.remove, "\n",
method.labs[method],
"\npoints outside\nrange"), ""),
lab.y = ifelse(n.remove > 0, lab.y, EYa.true))
# create plot
plot.dat %>%
filter(remove == F) %>%
ggplot(aes(x = method,
y = est,
fill = method,
color = method)) +
geom_boxplot() +
geom_text(data = remove.dat,
aes(x = 2, y = lab.y, label = label),
size = 2, color = "black") +
stat_summary(fun = mean,
geom = "point",
shape = 8,
size = 2,
orientation = "x",
show.legend = F) +
geom_hline(aes(yintercept = EYa.true),
linetype = "dashed",
color = "orange") +
facet_grid(vare ~ n,
scales = "free",
labeller = labeller(n = n.labs,
vare = vare.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates"),
subtitle = paste0("a = ", a., "; ",
n.rep, " simulations per setting")) +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank()) +
scale_fill_manual(values = pal_light,
labels = method.labs) +
scale_color_manual(values = pal_dark,
labels = method.labs)
}
plot.by.a(a. = 0)
plot.by.a(a. = 1)
plot.by.a(a. = 2)
plot.by.a(a. = 3)
plot.by.a(a. = 4)
plot.by.a(a. = 0, est_cutoff = 4)
plot.by.a(a. = 1, est_cutoff = 3)
plot.by.a(a. = 2, est_cutoff = 2)
plot.by.a(a. = 3, est_cutoff = 2)
plot.by.a(a. = 4, est_cutoff = 2)
plot.by.a(a. = 3, method. = c("OG", "NG", "CG"), n. = 800, vare. = 0.25)
tbl.a3 <- sim.out.long %>%
filter(a == 3,
n == 800,
vare == 0.25) %>%
group_by(method) %>%
summarise(bias = mean(est - EYa.true, na.rm = T),
emp.se = sd(est, na.rm = T),
est.se = mean(ste, na.rm = T),
mse = mean((est - EYa.true)^2))
tbl.a3 %>%
kable(digits = 3,
col.names = c("Method", "Bias", "ESE", "ASE", "MSE"),
caption = "Estimated E{Y(a)} for a = 3, n = 800, vare = 0.25") %>%
kable_styling("striped")
tbl.a3 <- sim.out.long %>%
filter(a == 3,
n == 800,
vare == 0.25) %>%
group_by(method) %>%
summarise(bias = mean(est - EYa.true, na.rm = T),
emp.se = sd(est, na.rm = T),
est.se = mean(ste, na.rm = T),
mse = mean((est - EYa.true)^2),
ci.cov = mean(ci.cov))
tbl.a3 %>%
kable(digits = 3,
col.names = c("Method", "Bias", "ESE", "ASE", "MSE", "CI Coverage"),
caption = "Estimated E{Y(a)} for a = 3, n = 800, vare = 0.25") %>%
kable_styling("striped")
tbl.a3 <- sim.out.long %>%
filter(a == 3,
n == 800,
vare == 0.25) %>%
group_by(method) %>%
summarise(bias = mean(est - EYa.true, na.rm = T),
emp.se = sd(est, na.rm = T),
est.se = mean(ste, na.rm = T),
mse = mean((est - EYa.true)^2),
ci.cov = mean(ci.cov, na.rm = T))
tbl.a3 %>%
kable(digits = 3,
col.names = c("Method", "Bias", "ESE", "ASE", "MSE", "CI Coverage"),
caption = "Estimated E{Y(a)} for a = 3, n = 800, vare = 0.25") %>%
kable_styling("striped")
tbl.a3.n8k <- sim.out.long %>%
filter(a == 3,
n == 8000,
vare == 0.25) %>%
group_by(method) %>%
summarise(bias = mean(est - EYa.true, na.rm = T),
emp.se = sd(est, na.rm = T),
est.se = mean(ste, na.rm = T),
mse = mean((est - EYa.true)^2),
ci.cov = mean(ci.cov, na.rm = T))
tbl.a3.n8k %>%
kable(digits = 3,
col.names = c("Method", "Bias", "ESE", "ASE", "MSE", "CI Coverage"),
caption = "Estimated E{Y(a)} for a = 3, n = 8000, vare = 0.25") %>%
kable_styling("striped")
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(kableExtra)
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/ipw_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
# true MSM parameters
g <- c(0.45, 0.20, 0.15, 0.15)
# number of sims per setting
n.rep <- nrow(sim.out) / n_distinct(dplyr::select(sim.out, n, B, vare))
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("ghat") | starts_with("stde"),
names_to = "method.param",
values_to = "val") %>%
mutate(method = factor(substr(method.param, 6, 7),
levels = c("OL", "OI",
"NL", "NI",
"CL", "CI")),
param = factor(substr(method.param, 9, 9)),
name = factor(substr(method.param, 1, 4)),
g.true = g[param]) %>%
dplyr::select(-method.param) %>%
group_by(clust, n, B, vare, method, param, name) %>%
mutate(id = row_number()) %>%
pivot_wider(names_from = name,
values_from = val,
id_cols = c(clust, n, B, vare, method,
param, g.true, id))
View(sim.out.long)
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("ghat") | starts_with("stde"),
names_to = "method.param",
values_to = "val") %>%
mutate(method = factor(substr(method.param, 6, 7),
levels = c("OL", "OI",
"NL", "NI",
"CL", "CI")),
param = factor(substr(method.param, 9, 9)),
name = factor(substr(method.param, 1, 4)),
g.true = g[param]) %>%
dplyr::select(-method.param) %>%
group_by(clust, n, B, vare, method, param, name) %>%
mutate(id = row_number()) %>%
pivot_wider(names_from = name,
values_from = val,
id_cols = c(clust, n, B, vare, method,
param, g.true, id)) %>%
mutate(ci.lower = ghat - qnorm(0.975) * stde,
ci.upper = ghat + qnorm(0.975) * stde,
ci.cov = EYa.true >= ci.lower & EYa.true <= ci.upper)
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("ghat") | starts_with("stde"),
names_to = "method.param",
values_to = "val") %>%
mutate(method = factor(substr(method.param, 6, 7),
levels = c("OL", "OI",
"NL", "NI",
"CL", "CI")),
param = factor(substr(method.param, 9, 9)),
name = factor(substr(method.param, 1, 4)),
g.true = g[param]) %>%
dplyr::select(-method.param) %>%
group_by(clust, n, B, vare, method, param, name) %>%
mutate(id = row_number()) %>%
pivot_wider(names_from = name,
values_from = val,
id_cols = c(clust, n, B, vare, method,
param, g.true, id)) %>%
mutate(ci.lower = ghat - qnorm(0.975) * stde,
ci.upper = ghat + qnorm(0.975) * stde,
ci.cov = g.true >= ci.lower & EYa.true <= ci.upper)
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("ghat") | starts_with("stde"),
names_to = "method.param",
values_to = "val") %>%
mutate(method = factor(substr(method.param, 6, 7),
levels = c("OL", "OI",
"NL", "NI",
"CL", "CI")),
param = factor(substr(method.param, 9, 9)),
name = factor(substr(method.param, 1, 4)),
g.true = g[param]) %>%
dplyr::select(-method.param) %>%
group_by(clust, n, B, vare, method, param, name) %>%
mutate(id = row_number()) %>%
pivot_wider(names_from = name,
values_from = val,
id_cols = c(clust, n, B, vare, method,
param, g.true, id)) %>%
mutate(ci.lower = ghat - qnorm(0.975) * stde,
ci.upper = ghat + qnorm(0.975) * stde,
ci.cov = g.true >= ci.lower & g.true <= ci.upper)
# summarize proportion of missing data by setting
sim.out.long %>%
filter(param == 1) %>%
group_by(method, n, B, vare) %>%
summarise(prop.error = mean(is.na(ghat))) %>%
filter(prop.error > 0) %>%
ungroup()
# extract simulation parameters
n <- unique(sim.out$n)
B <- unique(sim.out$B)
vare <- unique(sim.out$vare)
# make labels for plots
method.labs <- c("Oracle Linear",
"Naive Linear",
"Corrected Linear",
"Oracle IPW",
"Naive IPW",
"Corrected IPW")
names(method.labs) <- c("OL", "NL", "CL",
"OI", "NI", "CI")
n.labs <- paste0("n = ", n)
names(n.labs) <- n
B.labs <- paste0("B = ", B)
names(B.labs) <- B
vare.labs <- paste0("sigma_e = ", vare)
names(vare.labs) <- vare
param.labs <- paste0("\u03b3", c("0", "1", "2", "3"))
names(param.labs) <- 1:4
# colorblind friendly pallette
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# separate plots for each sample size
plot.by.var <- function(vare. = 0.05, est_cutoff = Inf) {
ggplot(
data = filter(sim.out.long,
vare == vare.,
abs(ghat - g.true) < est_cutoff),
aes(x = method,
y = ghat,
fill = method,
color = method)) +
geom_boxplot() +
stat_summary(fun = mean,
geom = "point",
shape = 8,
size = 2,
orientation = "x",
show.legend = F) +
geom_hline(aes(yintercept = g.true),
linetype = "dashed",
color = "orange") +
facet_grid(n ~ param,
scales = "free",
labeller = labeller(n = n.labs,
param = param.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates"),
subtitle = paste0(n.rep, " simulations per setting")) +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank()) +
scale_fill_manual(values = pal_light,
labels = method.labs) +
scale_color_manual(values = pal_dark,
labels = method.labs)
}
plot.by.var()
tbl <- sim.out.long %>%
group_by(param, method, n, B, vare) %>%
summarise(bias = mean(ghat - g.true, na.rm = T),
emp.se = sd(ghat, na.rm = T),
est.se = mean(stde)) %>%
gather(key, value, bias:est.se) %>%
unite(Group, param, key) %>%
spread(Group, value)
setNames(tbl, sub(".+_", "", names(tbl))) %>%
kable(digits = 3) %>%
kable_styling("striped") %>%
add_header_above(c(" " = 4,
"Component 1" = 3,
"Component 2" = 3,
"Component 3" = 3,
"Component 4" = 3))
tbl <- sim.out.long %>%
group_by(param, method, n, B, vare) %>%
summarise(bias = mean(ghat - g.true, na.rm = T),
emp.se = sd(ghat, na.rm = T),
est.se = mean(stde),
ci.cov = mean(ci.cov, na.rm = T)) %>%
gather(key, value, bias:ci.cov) %>%
unite(Group, param, key) %>%
spread(Group, value)
setNames(tbl, sub(".+_", "", names(tbl))) %>%
kable(digits = 3) %>%
kable_styling("striped") %>%
add_header_above(c(" " = 4,
"Component 1" = 4,
"Component 2" = 4,
"Component 3" = 4,
"Component 4" = 4))
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(kableExtra)
library(devtools)
load_all()
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(kableExtra)
library(devtools)
load_all()
# true estimand
g <- 0.75
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/dr_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list) %>%
mutate(g.true = g,
ci.lower = ghat - qnorm(0.975) * stde,
ci.upper = ghat + qnorm(0.975) * stde,
ci.cov = g.true >= ci.lower & g.true <= ci.upper,
method = factor(method,
levels = c("gfmla", "ipw", "dr"),
labels = c("G-Formula", "IPW", "Doubly Robust")),
type = factor(type,
levels = c("oracle", "naive", "mccs"),
labels = c("Oracle", "Naive", "MCCS")),
ps = factor(ps,
levels = c(0, 1),
labels = c("PS Correct", "PS Incorrect")),
out = factor(out,
levels = c(0, 1),
labels = c("Outcome Correct", "Outcome Incorrect")))
View(sim.out.list)
# true estimand
g <- 0.75
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/dr_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list) %>%
mutate(g.true = g,
#ci.lower = ghat - qnorm(0.975) * stde,
#ci.upper = ghat + qnorm(0.975) * stde,
#ci.cov = g.true >= ci.lower & g.true <= ci.upper,
method = factor(method,
levels = c("gfmla", "ipw", "dr"),
labels = c("G-Formula", "IPW", "Doubly Robust")),
type = factor(type,
levels = c("oracle", "naive", "mccs"),
labels = c("Oracle", "Naive", "MCCS")),
ps = factor(ps,
levels = c(0, 1),
labels = c("PS Correct", "PS Incorrect")),
out = factor(out,
levels = c(0, 1),
labels = c("Outcome Correct", "Outcome Incorrect")))
# number of sims per setting
n.rep <- nrow(sim.out) /
n_distinct(dplyr::select(sim.out, method, type, ps, out, n, B, vare))
View(sim.out)
# true estimand
g <- 0.75
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/dr_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list) %>%
mutate(g.true = g,
ci.lower = est - qnorm(0.975) * se,
ci.upper = est + qnorm(0.975) * se,
ci.cov = g.true >= ci.lower & g.true <= ci.upper,
method = factor(method,
levels = c("gfmla", "ipw", "dr"),
labels = c("G-Formula", "IPW", "Doubly Robust")),
type = factor(type,
levels = c("oracle", "naive", "mccs"),
labels = c("Oracle", "Naive", "MCCS")),
ps = factor(ps,
levels = c(0, 1),
labels = c("PS Correct", "PS Incorrect")),
out = factor(out,
levels = c(0, 1),
labels = c("Outcome Correct", "Outcome Incorrect")))
# number of sims per setting
n.rep <- nrow(sim.out) /
n_distinct(dplyr::select(sim.out, method, type, ps, out, n, B, vare))
# summarize proportion of missing data by setting
sim.out %>%
group_by(method, type, ps, out, n, B, vare) %>%
summarise(prop.error = mean(is.na(est))) %>%
filter(prop.error > 0) %>%
ungroup()
# extract simulation parameters
n <- unique(sim.out$n)
B <- unique(sim.out$B)
vare <- unique(sim.out$vare)
# make labels for plots
n.labs <- paste0("n = ", n)
names(n.labs) <- n
B.labs <- paste0("B = ", B)
names(B.labs) <- B
vare.labs <- paste0("sigma_e = ", vare)
names(vare.labs) <- vare
# colorblind friendly pallette
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# separate plots for each sample size
make.plot <- function(n. = n,
vare. = vare) {
sim.out %>%
filter(n %in% n.,
vare %in% vare.) %>%
ggplot(aes(x = type,
y = est,
fill = type,
color = type)) +
geom_boxplot() +
geom_hline(yintercept = g,
linetype = "dashed",
color = "orange") +
facet_grid(method ~ ps + out, scales = "free") +
labs(y = "Parameter Estimate",
fill = "Type",
color = "Type") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates"),
subtitle = paste0(n.rep, " simulations per setting")) +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank()) +
scale_fill_manual(values = pal_light) +
scale_color_manual(values = pal_dark)
}
make.plot()
tbl <- sim.out %>%
filter(n == 2000,
vare == 0.16) %>%
group_by(method, type, ps, out) %>%
summarise(bias = mean(est - g, na.rm = T),
emp.se = sd(est, na.rm = T),
est.se = mean(se, na.rm = T),
mse = mean((est - g.true)^2),
ci.cov = mean(ci.cov, na.rm = T))
tbl %>%
kable(digits = 3,
col.names = c("Method", "Type", "PS Model", "Outcome Model",
"Bias", "ESE", "ASE", "MSE", "CI Coverage"),
caption = "Estimated MSM Slope") %>%
kable_styling("striped")
