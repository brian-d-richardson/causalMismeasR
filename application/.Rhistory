v2_ESE = 10*sd(B, na.rm = T),
v3_ASE = 10*mean(V, na.rm = T),
v4_Cov = 100*mean(ci.if.cov, na.rm = T)) %>%
gather(key, value, v1_Bias:v4_Cov) %>%
unite(Group, q, key) %>%
spread(Group, value)
kbl1 <- setNames(tbl1, c("Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -3)))) %>%
kable(digits = c(0, 0, 0,
2, 2, 2, 1,
2, 2, 2, 1),
format = format,
align = "lccrrrrrrrr",
booktabs = T) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
add_header_above(c(" " = 3,
"q = 0.4" = 4,
"q = 0.8" = 4))
return(kbl1)
}
make.table(1)
make.table(2)
make.table(3)
make.table(4)
t2 <- make.table(2, format = "latex")
View(sim.out.long)
format = "html"
tbl1 <- sim.out.long %>%
mutate(Param = ifelse(param == 1, "$\beta_1$",
ifelse(param == 2, "$\beta_2$",
ifelse(param == 3, "$\beta_3$",
ifelse(param == 4, "$\log\sigma^2$"))))) %>%
tbl1 <- sim.out.long %>%
mutate(Param = ifelse(param == 1, "$\\beta_1$",
ifelse(param == 2, "$\\beta_2$",
ifelse(param == 3, "$\\beta_3$",
ifelse(param == 4, "$\\log\\sigma^2$"))))) %>%
group_by(q, param, method, nuis.x, nuis.c) %>%
summarise(v1_Bias = 10*mean(B - B.true, na.rm = T),
v2_ESE = 10*sd(B, na.rm = T),
v3_ASE = 10*mean(V, na.rm = T),
v4_Cov = 100*mean(ci.if.cov, na.rm = T)) %>%
gather(key, value, v1_Bias:v4_Cov) %>%
unite(Group, q, key) %>%
spread(Group, value)
tbl1 <- sim.out.long %>%
mutate(Param = ifelse(param == 1, "$\\beta_1$",
ifelse(param == 2, "$\\beta_2$",
ifelse(param == 3, "$\\beta_3$",
ifelse(param == 4, "$\\log\\sigma^2$"))))) %>%
group_by(q, Param, method, nuis.x, nuis.c) %>%
summarise(v1_Bias = 10*mean(B - B.true, na.rm = T),
v2_ESE = 10*sd(B, na.rm = T),
v3_ASE = 10*mean(V, na.rm = T),
v4_Cov = 100*mean(ci.if.cov, na.rm = T)) %>%
gather(key, value, v1_Bias:v4_Cov) %>%
unite(Group, q, key) %>%
spread(Group, value)
View(tbl1)
kbl1 <- setNames(tbl1, c("Param", "Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -3)))) %>%
kable(digits = c(0, 0, 0,
2, 2, 2, 1,
2, 2, 2, 1),
format = format,
align = "lccrrrrrrrr",
booktabs = T) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
kbl1 <- setNames(tbl1, c("Param", "Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -3)))) %>%
kable(digits = c(0, 0, 0,
2, 2, 2, 1,
2, 2, 2, 1),
format = format,
align = "ccccrrrrrrrr",
booktabs = T) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
kbl1 <- setNames(tbl1, c("Param", "Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -3)))) %>%
kable(digits = c(0, 0, 0, 0m
kbl1 <- setNames(tbl1, c("Param", "Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -3)))) %>%
kable(digits = c(0, 0, 0, 0,
2, 2, 2, 1,
2, 2, 2, 1),
format = format,
align = "ccccrrrrrrrr",
booktabs = T) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
add_header_above(c(" " = 4,
"q = 0.4" = 4,
"q = 0.8" = 4))
kbl1 <- setNames(tbl1, c("Param", "Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -3)))) %>%
kable(digits = c(0, 0, 0, 0,
2, 2, 2, 1,
2, 2, 2, 1),
format = format,
align = "ccccrrrrrrrr",
booktabs = T) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE) %>%
add_header_above(c(" " = 4,
"q = 0.4" = 4,
"q = 0.8" = 4))
kbl1 <- setNames(tbl1, c("Param", "Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -4)))) %>%
kable(digits = c(0, 0, 0, 0,
2, 2, 2, 1,
2, 2, 2, 1),
format = format,
align = "ccccrrrrrrrr",
booktabs = T) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE) %>%
add_header_above(c(" " = 4,
"q = 0.4" = 4,
"q = 0.8" = 4))
kbl1
make.table.allparam(format = "latex")
# table with all parameters
make.table.allparam <- function(format = "html") {
tbl1 <- sim.out.long %>%
mutate(Param = ifelse(param == 1, "$\\beta_1$",
ifelse(param == 2, "$\\beta_2$",
ifelse(param == 3, "$\\beta_3$",
ifelse(param == 4, "$\\log\\sigma^2$"))))) %>%
group_by(q, Param, method, nuis.x, nuis.c) %>%
summarise(v1_Bias = 10*mean(B - B.true, na.rm = T),
v2_ESE = 10*sd(B, na.rm = T),
v3_ASE = 10*mean(V, na.rm = T),
v4_Cov = 100*mean(ci.if.cov, na.rm = T)) %>%
gather(key, value, v1_Bias:v4_Cov) %>%
unite(Group, q, key) %>%
spread(Group, value)
kbl1 <- setNames(tbl1, c("Param", "Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -4)))) %>%
kable(digits = c(0, 0, 0, 0,
2, 2, 2, 1,
2, 2, 2, 1),
format = format,
align = "ccccrrrrrrrr",
booktabs = T) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE) %>%
add_header_above(c(" " = 4,
"q = 0.4" = 4,
"q = 0.8" = 4))
return(kbl1)
}
make.table.allparam()
make.table.allparam(format = "latex")
t3 <- make.table.allparam(format = "latex")
t3
rm(list = ls())
# indicator for running on cluster
on.cluster <- F
if (on.cluster) {
setwd(dirname(getwd()))
args <- commandArgs(TRUE)          # cluster id
} else {
args <- 1
}
library(devtools)
library(statmod)
library(fitdistrplus)
library(DALSM)
library(dplyr)
library(numDeriv)
load_all()
base.seed <- 10^6 * as.integer(args) # baseline seed (specific to cluster)
len.out <- 123                       # output size
n.sim <- 1                           # number of sims per cluster
n <- 8000                            # sample size
q <- 0.8                             # censoring proportion
rm(list = ls())
# indicator for running on cluster
on.cluster <- F
if (on.cluster) {
setwd(dirname(getwd()))
args <- commandArgs(TRUE)          # cluster id
} else {
args <- 1
}
library(devtools)
library(statmod)
library(fitdistrplus)
library(DALSM)
library(dplyr)
library(numDeriv)
load_all()
base.seed <- 10^6 * as.integer(args) # baseline seed (specific to cluster)
len.out <- 123                       # output size
n.sim <- 1                           # number of sims per cluster
n <- 8000                            # sample size
q <- 0.8                             # censoring proportion
## create simulation input
sim.in <- expand.grid(n = n,
q = q,
sim.id = 1:n.sim + base.seed)
## run simulations (roughly 6 minutes per replicate)
sim.out <- pbapply::pbvapply(
X = 1:nrow(sim.in),
FUN = function(ii) {
tryCatch(
expr = sim1(
n = sim.in$n[ii],
q = sim.in$q[ii],
seed = sim.in$sim.id[ii]),
error = function(e) c(
n = sim.in$n[ii],
q = sim.in$q[ii],
seed = sim.in$sim.id[ii],
rep(NA, len.out - 3)))
},
FUN.VALUE = numeric(len.out)) |>
t()
rm(list = ls())
#setwd(dirname(getwd()))
library(statmod)
library(devtools)
library(ggplot2)
library(zipfR)
library(splines2)
library(nloptr)
library(tictoc)
load_all()
set.seed(3)
n <- 8000             # sample size
q <- 0.8              # censoring proportion
B <- c(1, 10, 2)      # beta
s2 <- 2               # variance of Y|X,Z
ls2 <- log(2)
x.thetas <- c(0.5, -0.5)   # theta parameters for X|Z
x.gamma <- 1          # gamma parameter for X|Z
c.gamma <- 2          # gamma parameter for C|Z
mx <- 40                   # number of nodes for X
my <- 5                    # number of nodes for Y
dat.list <- gen.data.beta(
n = n, q = q, B = B, s2 = s2,
x.thetas = x.thetas, x.gamma = x.gamma, c.gamma = c.gamma)
datf <- dat.list$datf          # full data
dat0 <- dat.list$dat0          # oracle data
dat <- dat.list$dat            # observed data
datcc <- dat.list$datcc        # complete case data
zs <- sort(unique(dat$Z))      # unique z values
# unique z values
zs <- sort(unique(dat$Z))
# B-spline knots
knots <- quantile(c(0, 1, dat$W), probs = seq(0, 1, length = m.knots))
# plot generated data
ggplot(datf,
aes(x = X,
y = Y,
color = factor(Z))) +
geom_point() +
labs(color = "Z") +
ggtitle("Oracle Data")
ggplot(datcc,
aes(x = W,
y = Y,
color = factor(Z))) +
geom_point() +
labs(color = "Z") +
ggtitle("Complete Case Data")
# parameters for spline model
m.knots <- 5
deg <- 3
# unique z values
zs <- sort(unique(dat$Z))
# B-spline knots
knots <- quantile(c(0, 1, dat$W), probs = seq(0, 1, length = m.knots))
# B-spline basis with grid for integration
xx <- seq(0, 1, length = 100)
bs.grid <- splines::bs(
x = xx,
knots = knots,
Boundary.knots = c(0, 1),
degree = deg,
intercept = F)
#bs.grid <- bs.grid[, -c(ncol(bs.grid) - 1, ncol(bs.grid))]
wts <- colMeans(bs.grid)
colMeans(bs.grid)
rowSums*bs.grid
rowSums(bs.grid)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(stringr)
library(ggh4x)
library(scales)
library(ggthemes)
library(kableExtra)
# true beta
B.true <- c(1, 10, 2, log(1))
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 1:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0(
"sim1_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
colnames(sim.out) <- gsub(".B", ".", colnames(sim.out))
colnames(sim.out) <- gsub("B2", "trueB2", colnames(sim.out))
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with(c("B", "V")),
names_to = "method.param",
values_to = "estimate") %>%
mutate(estimate = ifelse(abs(estimate) > 100, NA, estimate),
name = factor(str_sub(method.param, 1, 1)),
method = factor(str_sub(method.param, 3, 4),
levels = c("sp", "ml", "cc", "or"),
labels = c("Semipar", "MLE", "CC", "Oracle")),
nuis.x = factor(str_sub(str_sub(
gsub("[.]", "", method.param), 4, -2), 1, 1),
levels = c("", "1", "0",  "2"),
labels = c("-", "T", "F", "Nonpar")),
nuis.c = factor(str_sub(str_sub(
gsub("[.]", "", method.param), 4, -2), 2, 2),
levels = c("", "1", "0",  "2"),
labels = c("-", "T", "F", "Nonpar")),
param = factor(str_sub(method.param, -1, -1)),
B.true = B.true[param]) %>%
dplyr::select(-c(method.param)) %>%
group_by(clust, n, q, name, method, nuis.x, nuis.c, param) %>%
mutate(id = row_number()) %>%
pivot_wider(names_from = name,
values_from = estimate,
id_cols = c(clust, n, q, method, nuis.x, nuis.c,
param, B.true, id)) %>%
mutate(ci.lower = B - qnorm(0.975) * V,
ci.upper = B + qnorm(0.975) * V,
ci.cov = B.true >= ci.lower & B.true <= ci.upper)
View(sim.out)
View(sim.out)
boxplot(sim.out$V.ml.02)
boxplot(sim.out$V.ml.02[sim.out$q == 0.8])
mean(sim.out$V.ml.02[sim.out$q == 0.8])
mean(sim.out$V.ml.02[sim.out$q == 0.8], na.rm = T)
mean(sim.out$V.ml.22[sim.out$q == 0.8])
boxplot(sim.out$V.ml.22[sim.out$q == 0.8])
sum(sim.out$V.ml.22[sim.out$q == 0.8] > 1)
sum(sim.out$V.ml.22[sim.out$q == 0.8] > 0.5)
boxplot(log(sim.out$V.ml.22[sim.out$q == 0.8]))
median(sim.out$V.ml.22[sim.out$q == 0.8])
ggplot(filter(sim.out, q == 0.8)) + geom_boxplot(y = V.ml.22)
ggplot(filter(sim.out, q == 0.8)) + geom_boxplot(aes(y = V.ml.22))
ggplot(filter(sim.out, q == 0.8)) + geom_boxplot(aes(y = log(V.ml.22)))
ggplot(filter(sim.out, q == 0.8)) + geom_boxplot(aes(y = log(V.ml.22))) + labs(y = "log(Estimated Variance)")
ggplot(filter(sim.out, q == 0.8)) + geom_boxplot(aes(y = log(V.ml.22))) + labs(y = "log(Estimated Variance)") + geom_hline(yintercept = log(2.79))
ggplot(filter(sim.out, q == 0.8)) + geom_boxplot(aes(y = log(V.ml.22))) + labs(y = "log(Estimated Variance)") + geom_hline(yintercept = log(.279))
ggplot(filter(sim.out, q == 0.8)) + geom_boxplot(aes(y = log(V.ml.22))) + labs(y = "log(Estimated Variance)") + geom_hline(yintercept = log(.279), color = "blue", linetype = "dashed")
knitr::opts_chunk$set(echo = TRUE)
devtools::install_github(repo = "brian-d-richardson/mismex",
ref = "main")
rm(list = ls())
library(geex)
library(ggplot2)
library(mismex)
library(MASS)
library(dplyr)
# Set seed for full analysis
set.seed(1234)
getwd()
setwd("C:/Users/Brian Richardson/OneDrive - University of North Carolina at Chapel Hill/Desktop/CFAR/Projects in Progress/Confounding and Measurement Error/mismex/application")
# Build application data set
load("HVTN505/data/dat.505.rda")
assays <- subset(var.505, assay %in% c("fcrR2a", "fcrR3a", "phago"))
# Build application data set
load("HVTN505/data/dat.505.rda")
assays <- subset(var.505, assay %in% c("fcrR2a", "fcrR3a", "phago"))
fulldat <- merge(dat.505, primarydat, by = "ptid", all = T)
fulldat$marker1 <- log(fulldat$ADCP1)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(stringr)
library(ggh4x)
library(scales)
library(ggthemes)
library(kableExtra)
# true beta
B.true <- c(1, 10, 2, log(1))
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0(
"sim1_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
colnames(sim.out) <- gsub(".B", ".", colnames(sim.out))
colnames(sim.out) <- gsub("B2", "trueB2", colnames(sim.out))
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with(c("B", "V")),
names_to = "method.param",
values_to = "estimate") %>%
mutate(estimate = ifelse(abs(estimate) > 100, NA, estimate),
name = factor(str_sub(method.param, 1, 1)),
method = factor(str_sub(method.param, 3, 4),
levels = c("sp", "ml", "cc", "or"),
labels = c("Semipar", "MLE", "CC", "Oracle")),
nuis.x = factor(str_sub(str_sub(
gsub("[.]", "", method.param), 4, -2), 1, 1),
levels = c("", "1", "0",  "2"),
labels = c("-", "T", "F", "Nonpar")),
nuis.c = factor(str_sub(str_sub(
gsub("[.]", "", method.param), 4, -2), 2, 2),
levels = c("", "1", "0",  "2"),
labels = c("-", "T", "F", "Nonpar")),
param = factor(str_sub(method.param, -1, -1)),
B.true = B.true[param]) %>%
dplyr::select(-c(method.param)) %>%
group_by(clust, n, q, name, method, nuis.x, nuis.c, param) %>%
mutate(id = row_number()) %>%
pivot_wider(names_from = name,
values_from = estimate,
id_cols = c(clust, n, q, method, nuis.x, nuis.c,
param, B.true, id)) %>%
mutate(ci.lower = B - qnorm(0.975) * V,
ci.upper = B + qnorm(0.975) * V,
ci.cov = B.true >= ci.lower & B.true <= ci.upper)
# check for simulations with errors
sim.out.long %>%
filter(param == 1) %>%
group_by(q, n, method, nuis.x, nuis.c) %>%
summarize(n.error = sum(is.na(B)),
prop.error = mean(is.na(B))) %>%
filter(prop.error > 0) %>%
kable(digits = 3) %>%
kable_styling("striped")
# table with simulation results
make.table <- function(param., format = "html") {
tbl1 <- sim.out.long %>%
filter(param == param.) %>%
group_by(q, method, nuis.x, nuis.c) %>%
summarise(v1_Bias = 10*mean(B - B.true, na.rm = T),
v2_ESE = 10*sd(B, na.rm = T),
v3_ASE = 10*mean(V, na.rm = T),
v4_Cov = 100*mean(ci.cov, na.rm = T)) %>%
gather(key, value, v1_Bias:v4_Cov) %>%
unite(Group, q, key) %>%
spread(Group, value)
kbl1 <- setNames(tbl1, c("Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -3)))) %>%
kable(digits = c(0, 0, 0,
2, 2, 2, 1,
2, 2, 2, 1),
format = format,
align = "lccrrrrrrrr",
booktabs = T) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
add_header_above(c(" " = 3,
"q = 0.4" = 4,
"q = 0.8" = 4))
return(kbl1)
}
make.table(1)
make.table(2)
make.table(3)
make.table(4)
t2 <- make.table(2, format = "latex")
t2
# table with all parameters
make.table.allparam <- function(format = "html") {
tbl1 <- sim.out.long %>%
mutate(Param = ifelse(param == 1, "$\\beta_1$",
ifelse(param == 2, "$\\beta_2$",
ifelse(param == 3, "$\\beta_3$",
"$\\log\\sigma^2$")))) %>%
group_by(q, Param, method, nuis.x, nuis.c) %>%
summarise(v1_Bias = 10*mean(B - B.true, na.rm = T),
v2_ESE = 10*sd(B, na.rm = T),
v3_ASE = 10*mean(V, na.rm = T),
v4_Cov = 100*mean(ci.cov, na.rm = T)) %>%
gather(key, value, v1_Bias:v4_Cov) %>%
unite(Group, q, key) %>%
spread(Group, value)
kbl1 <- setNames(tbl1, c("Param", "Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -4)))) %>%
kable(digits = c(0, 0, 0, 0,
2, 2, 2, 1,
2, 2, 2, 1),
format = format,
align = "ccccrrrrrrrr",
booktabs = T) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE) %>%
add_header_above(c(" " = 4,
"q = 0.4" = 4,
"q = 0.8" = 4))
return(kbl1)
}
make.table.allparam()
t3 <- make.table.allparam(format = "latex")
t3
