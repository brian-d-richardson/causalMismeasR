rm(list = ls())
library(rootSolve)
library(MASS)
library(mvtnorm)
library(tidyr)
library(devtools)
library(simex)
library(dplyr)
setwd(dirname(dirname(getwd())))
load_all()
# baseline seed (specific to cluster)
args <- 1#commandArgs(TRUE)
base.seed <- 10^6 * as.integer(args)
# fixed parameters
n.sim <- 1           # number of sims per cluster
a <- -1:2            # exposures at which to estimate E{Y(a)}
# varied parameters
n <- 800#c(800, 8000)                 # sample size
B <- 80                           # number of MC replicates
vare <- 0.09                # measurement error variance for A1, A2
# create simulation input
sim.in <- expand.grid(n = n,
B = B,
vare = vare,
sim.id = 1:n.sim + base.seed)
# run simulations
sim.out <- pbapply::pbvapply(
X = 1:nrow(sim.in),
FUN = function(ii) {
sim1.gfmla.nonlinear.coarse(
n = sim.in$n[ii],
B = sim.in$B[ii],
vare = sim.in$vare[ii],
a = a,
seed = sim.in$sim.id[ii])
},
FUN.VALUE = numeric(68)) |>
t()
View(sim.in)
View(sim.out)
rm(list = ls())
library(rootSolve)
library(MASS)
library(mvtnorm)
library(tidyr)
library(devtools)
library(simex)
library(dplyr)
load_all()
# baseline seed (specific to cluster)
args <- 1#commandArgs(TRUE)
base.seed <- 10^6 * as.integer(args)
n.sim <- 1                     # number of sims per cluster
a <- seq(-1, 2, length = 20)   # exposures at which to estimate E{Y(a)}
# varied parameters
n <- c(400, 800, 8000)      # sample size
B <- 80                     # number of MC replicates
vare <- 0.09                # measurement error variance for
# create simulation input
sim.in <- expand.grid(n = n,
B = B,
vare = vare,
sim.id = 1:n.sim + base.seed)
load_all()
load_all()
# run simulations
sim.out <- pbapply::pbvapply(
X = 1:nrow(sim.in),
FUN = function(ii) {
sim2.gfmla.nonlinear.coarse(
n = sim.in$n[ii],
B = sim.in$B[ii],
vare = sim.in$vare[ii],
a = a,
seed = sim.in$sim.id[ii])
},
FUN.VALUE = numeric(124)) |>
t()
View(sim.in)
View(sim.out)
rm(list = ls())
library(rootSolve)
library(MASS)
library(mvtnorm)
library(tidyr)
library(devtools)
library(simex)
library(dplyr)
load_all()
# baseline seed (specific to cluster)
args <- 1#commandArgs(TRUE)
base.seed <- 10^6 * as.integer(args)
n.sim <- 1                     # number of sims per cluster
a <- seq(-1, 2, length = 20)   # exposures at which to estimate E{Y(a)}
# varied parameters
n <- c(400, 800, 8000)      # sample size
B <- 80                     # number of MC replicates
vare <- 0.09                # measurement error variance for
# create simulation input
sim.in <- expand.grid(n = n,
B = B,
vare = vare,
sim.id = 1:n.sim + base.seed)
sim2.gfmla.nonlinear.fine(
n = sim.in$n[ii],
B = sim.in$B[ii],
vare = sim.in$vare[ii],
a = a,
seed = sim.in$sim.id[ii])
# run simulations
sim.out <- pbapply::pbvapply(
X = 1:nrow(sim.in),
FUN = function(ii) {
sim2.gfmla.nonlinear.fine(
n = sim.in$n[ii],
B = sim.in$B[ii],
vare = sim.in$vare[ii],
a = a,
seed = sim.in$sim.id[ii])
},
FUN.VALUE = numeric(124)) |>
t()
View(sim.out)
.09 / .25
.25 / (.09 + .25)
?fit.gfmla
rm(list = ls())
library(rootSolve)
library(MASS)
library(mvtnorm)
library(tidyr)
library(devtools)
load_all()
# baseline seed (specific to cluster)
args <- 1#commandArgs(TRUE)
base.seed <- 10^6 * as.integer(args)
# number of sims per cluster
n.sim <- 1
# varied parameters
n <- 800                          # sample size
B <- 80                           # number of MC replicates
vare <- 0.09                      # measurement error variance for A1, A2
# create simulation input
sim.in <- expand.grid(n = n,
B = B,
vare = vare,
sim.id = 1:n.sim + base.seed)
# create simulation input
sim.in <- expand.grid(n = n,
B = B,
vare = vare,
sim.id = 1:n.sim + base.seed)
# run simulations
sim.out <- pbapply::pbvapply(
X = 1:nrow(sim.in),
FUN = function(ii) {
sim3.ipw.nonlinearps(
n = sim.in$n[ii],
B = sim.in$B[ii],
vare = sim.in$vare[ii],
seed = sim.in$sim.id[ii])
},
FUN.VALUE = numeric(49)) |>
t()
View(sim.out)
rm(list = ls())
library(rootSolve)
library(MASS)
library(mvtnorm)
library(tidyr)
library(devtools)
load_all()
args = 1
base.seed <- 10^6 * as.integer(args)
# number of sims per cluster
n.sim <- 1
# varied parameters
n <- c(400, 2000)                 # sample size
B <- 80                           # number of MC replicates
# number of sims per cluster
n.sim <- 1
# varied parameters
n <- c(400, 2000)                 # sample size
B <- 80                           # number of MC replicates
vare <- 0.25                      # measurement error variance
n = 2000
# create simulation input
sim.in <- expand.grid(n = n,
B = B,
vare = vare,
sim.id = 1:n.sim + base.seed)
# run simulations
sim.out.list <- pbapply::pblapply(
X = 1:nrow(sim.in),
FUN = function(ii) {
sim4.dr.nonlinearps(
n = sim.in$n[ii],
B = sim.in$B[ii],
vare = sim.in$vare[ii],
seed = sim.in$sim.id[ii])
})
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(devtools)
load_all()
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/sim1_gfmla_nonlinear_coarse/sd",
clust, ".csv")))
})
getwd()
