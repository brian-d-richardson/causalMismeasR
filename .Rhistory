upper = EYa + qnorm(1 - alpha / 2) * se)
return(drc.dat)
}
drc.dat <- rbind(cbind(Method = "Naive", format.gfmla.res(a, gfmla.naive)),
cbind(Method = "Oracle", format.gfmla.res(a, gfmla.oracle)),
cbind(Method = "MCCS", format.gfmla.res(a, gfmla.mccs))) %>%
mutate(Method = factor(Method, levels = c("Naive", "Oracle", "MCCS")))
# true dose response curve
LL1 <- rbinom(10^6, 1, 0.5)       # large sample confounders
LL2 <- rbinom(10^6, 1, 0.2)
LL <- cbind(LL1, LL2)
drc.true <- vapply(
X = a,
FUN.VAL <- 0,
FUN = function(aa) {
mean(inv.link(cbind(1, aa, LL1, LL2, a*LL1, a*LL2) %*% g))
}
)
drc.dat$drc.true <- rep(drc.true, times = nlevels(drc.dat$Method))
# plot dose response curves -----------------------------------------------
ggplot(data = drc.dat,
aes(x = a,
y = est,
ymin = lower,
ymax = upper,
color = Method,
fill = Method)) +
geom_point() +
geom_line() +
geom_line(aes(y = drc.true),
color = "black",
alpha = 0.5) +
geom_ribbon(alpha = 0.3) +
facet_grid(~Method) +
theme(legend.position = "none")
rm(list = ls())
library(devtools)
library(statmod)
library(pbapply)
library(ggplot2)
library(dplyr)
library(MASS)
#setwd(dirname(getwd()))
load_all()
# define parameters -------------------------------------------------------
seed <- 1                                       # random seed
n <- 800                                        # sample size
B <- 80                                         # MC replicates
var.e <- 0.25                                   # var(epsilon)
inv.link <- inv.logit                           # inverse link
d.inv.link <- d.inv.logit                       # deriv of inv link
g <- c(-2, 0.7, -0.6, 0.4, -0.4, -0.2)
formula <- "~A*L1 + A*L2"                       # outcome model formula
# according to DGP #1 in Blette submission
set.seed(seed)
L1 <- rbinom(n, 1, 0.5)                                        # confounder 1
L2 <- rbinom(n, 1, 0.2)                                        # confounder 2
L <- cbind(L1, L2)
A <- rnorm(n, 2 + 0.3*L1 - 0.5*L2, sqrt(0.6))
EY <- inv.link(model.matrix(as.formula(formula)) %*% g)        # mean of outcome
Y <- rbinom(n, 1, EY)                                          # outcome
Astar <- A + rnorm(n, 0, sqrt(var.e))                          # mismeasured A
a <- seq(min(A), max(A), length = 10)            # exposure values of interest
# estimate E{Y(a)} at grid of a -------------------------------------------
# (i) oracle g-formula
gfmla.oracle <- fit.gfmla(Y = Y, A = A, L = L, a = a, formula = formula,
inv.link = inv.link, d.inv.link = d.inv.link)
# (ii) naive g-formula
gfmla.naive <- fit.gfmla(Y = Y, A = Astar, L = L, a = a, formula = formula,
inv.link = inv.link, d.inv.link = d.inv.link)
# (iii) corrected g-formula
gfmla.mccs <- fit.gfmla.mccs(Y = Y, A = Astar, L = L, a = a, formula = formula,
var.e = var.e, B = B, seed = seed,
inv.link = inv.link, d.inv.link = d.inv.link)
# format data for dose response curve plot --------------------------------
format.gfmla.res <- function(a, gfmla.res, alpha = 0.05) {
EYa <- tail(gfmla.res$est, length(a))
se <- sqrt(tail(diag(gfmla.res$var), length(a)))
drc.dat <- data.frame(
a = a,
est = EYa,
se = se,
lower = EYa - qnorm(1 - alpha / 2) * se,
upper = EYa + qnorm(1 - alpha / 2) * se)
return(drc.dat)
}
drc.dat <- rbind(cbind(Method = "Naive", format.gfmla.res(a, gfmla.naive)),
cbind(Method = "Oracle", format.gfmla.res(a, gfmla.oracle)),
cbind(Method = "MCCS", format.gfmla.res(a, gfmla.mccs))) %>%
mutate(Method = factor(Method, levels = c("Naive", "Oracle", "MCCS")))
# true dose response curve
LL1 <- rbinom(10^6, 1, 0.5)       # large sample confounders
LL2 <- rbinom(10^6, 1, 0.2)
LL <- cbind(LL1, LL2)
drc.true <- vapply(
X = a,
FUN.VAL <- 0,
FUN = function(aa) {
mean(inv.link(cbind(1, aa, LL1, LL2, a*LL1, a*LL2) %*% g))
}
)
drc.dat$drc.true <- rep(drc.true, times = nlevels(drc.dat$Method))
# plot dose response curves -----------------------------------------------
ggplot(data = drc.dat,
aes(x = a,
y = est,
ymin = lower,
ymax = upper,
color = Method,
fill = Method)) +
geom_point() +
geom_line() +
geom_line(aes(y = drc.true),
color = "black",
alpha = 0.5) +
geom_ribbon(alpha = 0.3) +
facet_grid(~Method) +
theme(legend.position = "none")
ggplot(data = drc.dat,
aes(x = a,
y = est,
ymin = lower,
ymax = upper,
color = Method,
fill = Method)) +
geom_point() +
geom_line() +
geom_line(aes(y = drc.true),
color = "black",
alpha = 1) +
geom_ribbon(alpha = 0.3) +
facet_grid(~Method) +
theme(legend.position = "none")
ggplot(data = drc.dat,
aes(x = a,
y = est,
ymin = lower,
ymax = upper,
color = Method,
fill = Method)) +
geom_point() +
geom_line() +
geom_line(aes(y = drc.true),
color = "black",
alpha = 1,
linewidth = 1) +
geom_ribbon(alpha = 0.3) +
facet_grid(~Method) +
theme(legend.position = "none")
ggplot(data = drc.dat,
aes(x = a,
y = est,
ymin = lower,
ymax = upper,
color = Method,
fill = Method)) +
geom_line(aes(y = drc.true),
color = "black",
alpha = 1,
linewidth = 1) +
geom_point() +
geom_line() +
geom_ribbon(alpha = 0.3) +
facet_grid(~Method) +
theme(legend.position = "none")
drc.dat %>%
group_by(Method) %>%
summarise(mean.se = mean(se))
rm(list = ls())
library(devtools)
library(statmod)
library(pbapply)
library(ggplot2)
library(dplyr)
library(MASS)
#setwd(dirname(getwd()))
load_all()
# define parameters -------------------------------------------------------
seed <- 2                                       # random seed
n <- 800                                        # sample size
B <- 80                                         # MC replicates
var.e <- 0.25                                   # var(epsilon)
inv.link <- inv.logit                           # inverse link
d.inv.link <- d.inv.logit                       # deriv of inv link
g <- c(-2, 0.7, -0.6, 0.4, -0.4, -0.2)
formula <- "~A*L1 + A*L2"                       # outcome model formula
# according to DGP #1 in Blette submission
set.seed(seed)
L1 <- rbinom(n, 1, 0.5)                                        # confounder 1
L2 <- rbinom(n, 1, 0.2)                                        # confounder 2
L <- cbind(L1, L2)
A <- rnorm(n, 2 + 0.3*L1 - 0.5*L2, sqrt(0.6))
EY <- inv.link(model.matrix(as.formula(formula)) %*% g)        # mean of outcome
Y <- rbinom(n, 1, EY)                                          # outcome
Astar <- A + rnorm(n, 0, sqrt(var.e))                          # mismeasured A
a <- seq(min(A), max(A), length = 10)            # exposure values of interest
# estimate E{Y(a)} at grid of a -------------------------------------------
# (i) oracle g-formula
gfmla.oracle <- fit.gfmla(Y = Y, A = A, L = L, a = a, formula = formula,
inv.link = inv.link, d.inv.link = d.inv.link)
# (ii) naive g-formula
gfmla.naive <- fit.gfmla(Y = Y, A = Astar, L = L, a = a, formula = formula,
inv.link = inv.link, d.inv.link = d.inv.link)
# (iii) corrected g-formula
gfmla.mccs <- fit.gfmla.mccs(Y = Y, A = Astar, L = L, a = a, formula = formula,
var.e = var.e, B = B, seed = seed,
inv.link = inv.link, d.inv.link = d.inv.link)
# format data for dose response curve plot --------------------------------
format.gfmla.res <- function(a, gfmla.res, alpha = 0.05) {
EYa <- tail(gfmla.res$est, length(a))
se <- sqrt(tail(diag(gfmla.res$var), length(a)))
drc.dat <- data.frame(
a = a,
est = EYa,
se = se,
lower = EYa - qnorm(1 - alpha / 2) * se,
upper = EYa + qnorm(1 - alpha / 2) * se)
return(drc.dat)
}
drc.dat <- rbind(cbind(Method = "Naive", format.gfmla.res(a, gfmla.naive)),
cbind(Method = "Oracle", format.gfmla.res(a, gfmla.oracle)),
cbind(Method = "MCCS", format.gfmla.res(a, gfmla.mccs))) %>%
mutate(Method = factor(Method, levels = c("Naive", "Oracle", "MCCS")))
# true dose response curve
LL1 <- rbinom(10^6, 1, 0.5)       # large sample confounders
LL2 <- rbinom(10^6, 1, 0.2)
LL <- cbind(LL1, LL2)
drc.true <- vapply(
X = a,
FUN.VAL <- 0,
FUN = function(aa) {
mean(inv.link(cbind(1, aa, LL1, LL2, a*LL1, a*LL2) %*% g))
}
)
drc.dat$drc.true <- rep(drc.true, times = nlevels(drc.dat$Method))
# plot dose response curves -----------------------------------------------
ggplot(data = drc.dat,
aes(x = a,
y = est,
ymin = lower,
ymax = upper,
color = Method,
fill = Method)) +
geom_line(aes(y = drc.true),
color = "black",
alpha = 1,
linewidth = 1) +
geom_point() +
geom_line() +
geom_ribbon(alpha = 0.3) +
facet_grid(~Method) +
theme(legend.position = "none")
drc.dat %>%
group_by(Method) %>%
summarise(mean.se = mean(se))
n = 800; a = 3; vare = 0.25; B = 80; seed = 1;
inv.link <- inv.logit                           # inverse link
d.inv.link <- d.inv.logit                       # deriv of inv link
g <- c(-2, 0.7, -0.6, 0.4, -0.4, -0.2)
formula <- "~A*L1 + A*L2"                       # outcome model formula
# simulate data
set.seed(seed)
L1 <- rbinom(n, 1, 0.5)                                        # confounder 1
L2 <- rbinom(n, 1, 0.2)                                        # confounder 2
L <- cbind(L1, L2)
A <- rnorm(n, 2 + 0.3*L1 - 0.5*L2, sqrt(0.6))
EY <- inv.link(model.matrix(as.formula(formula)) %*% g)        # mean of outcome
Y <- rbinom(n, 1, EY)                                          # outcome
Astar <- A + rnorm(n, 0, sqrt(var.e))                          # mismeasured A
a <- seq(min(A), max(A), length = 10)            # exposure values of interest
# estimate E{Y(a)} at grid of a -------------------------------------------
# (i) oracle g-formula
gfmla.oracle <- fit.gfmla(Y = Y, A = A, L = L, a = a, formula = formula,
inv.link = inv.link, d.inv.link = d.inv.link)
# (ii) naive g-formula
gfmla.naive <- fit.gfmla(Y = Y, A = Astar, L = L, a = a, formula = formula,
inv.link = inv.link, d.inv.link = d.inv.link)
# (iii) corrected g-formula
gfmla.mccs <- fit.gfmla.mccs(Y = Y, A = Astar, L = L, a = a, formula = formula,
var.e = var.e, B = B, seed = seed,
inv.link = inv.link, d.inv.link = d.inv.link)
c(1, a)
a <- 3                                          # exposure values of interest
rm(list = ls())
library(devtools)
library(statmod)
library(pbapply)
library(ggplot2)
library(dplyr)
library(MASS)
#setwd(dirname(getwd()))
load_all()
# define parameters -------------------------------------------------------
seed <- 2                                       # random seed
n <- 800                                        # sample size
B <- 80                                         # MC replicates
var.e <- 0.25                                   # var(epsilon)
inv.link <- inv.logit                           # inverse link
d.inv.link <- d.inv.logit                       # deriv of inv link
g <- c(-2, 0.7, -0.6, 0.4, -0.4, -0.2)
formula <- "~A*L1 + A*L2"                       # outcome model formula
a <- 3                                          # exposure values of interest
# according to DGP #1 in Blette submission
set.seed(seed)
L1 <- rbinom(n, 1, 0.5)                                        # confounder 1
L2 <- rbinom(n, 1, 0.2)                                        # confounder 2
L <- cbind(L1, L2)
A <- rnorm(n, 2 + 0.3*L1 - 0.5*L2, sqrt(0.6))
EY <- inv.link(model.matrix(as.formula(formula)) %*% g)        # mean of outcome
Y <- rbinom(n, 1, EY)                                          # outcome
Astar <- A + rnorm(n, 0, sqrt(var.e))                          # mismeasured A
# estimate E{Y(a)} at grid of a -------------------------------------------
# oracle g-formula
gfmla.oracle <- fit.gfmla(Y = Y, A = A, L = L, a = a, formula = formula,
inv.link = inv.link, d.inv.link = d.inv.link)
# g-formula
gfmla.naive <- fit.gfmla(Y = Y, A = Astar, L = L, a = a, formula = formula,
inv.link = inv.link, d.inv.link = d.inv.link)
# corrected g-formula
gfmla.mccs <- fit.gfmla.mccs(Y = Y, A = Astar, L = L, a = a, formula = formula,
var.e = var.e, B = B, seed = seed,
inv.link = inv.link, d.inv.link = d.inv.link)
gfmla.naive$est
# (i) oracle GLM
est.NL <- c(1, a) %*% gfmla.naive$est[1:2]
est.NL
gfmla.naive$var
ste.NL <- c(1, a) %*% gfmla.naive$var[1:2, 1:2] %*% t(c(1, a))
gfmla.naive$var[1:2, 1:2] %*% c(1, a)
c(1, a) %*% gfmla.naive$var[1:2, 1:2] %*% c(1, a)
sqrt(c(1, a) %*% gfmla.naive$var[1:2, 1:2] %*% c(1, a))
# (i) oracle GLM
est.NL <- c(1, a) %*% gfmla.naive$est[1:2]
ste.NL <- sqrt(c(1, a) %*% gfmla.naive$var[1:2, 1:2] %*% c(1, a))
est.NL
ste.NL
est.OL <- c(1, a) %*% gfmla.oracle$est[1:2]
ste.OL <- sqrt(c(1, a) %*% gfmla.oracle$var[1:2, 1:2] %*% c(1, a))
est.NL <- c(1, a) %*% gfmla.naive$est[1:2]
ste.NL <- sqrt(c(1, a) %*% gfmla.naive$var[1:2, 1:2] %*% c(1, a))
est.CL <- c(1, a) %*% gfmla.mccs$est[1:2]
ste.CL <- sqrt(c(1, a) %*% gfmla.mccs$var[1:2, 1:2] %*% c(1, a))
ste.NL
ste.CL
inv.link <- inv.logit                           # inverse link
d.inv.link <- d.inv.logit                       # deriv of inv link
g <- c(-2, 0.7, -0.6, 0.4, -0.4, -0.2)
formula <- "~A*L1 + A*L2"                       # outcome model formula
a <- 3                                          # exposure values of interest
# simulate data
set.seed(seed)
L1 <- rbinom(n, 1, 0.5)                                        # confounder 1
L2 <- rbinom(n, 1, 0.2)                                        # confounder 2
L <- cbind(L1, L2)
A <- rnorm(n, 2 + 0.3*L1 - 0.5*L2, sqrt(0.6))
EY <- inv.link(model.matrix(as.formula(formula)) %*% g)        # mean of outcome
Y <- rbinom(n, 1, EY)                                          # outcome
Astar <- A + rnorm(n, 0, sqrt(var.e))                          # mismeasured A
## fit g-formula models
# oracle g-formula
gfmla.oracle <- fit.gfmla(Y = Y, A = A, L = L, a = a, formula = formula,
inv.link = inv.link, d.inv.link = d.inv.link)
# naive g-formula
gfmla.naive <- fit.gfmla(Y = Y, A = Astar, L = L, a = a, formula = formula,
inv.link = inv.link, d.inv.link = d.inv.link)
# corrected g-formula
gfmla.mccs <- fit.gfmla.mccs(Y = Y, A = Astar, L = L, a = a, formula = formula,
var.e = var.e, B = B, seed = seed,
inv.link = inv.link, d.inv.link = d.inv.link)
## extract estimated E{Y(a)} and std error
# (i) oracle GLM
est.OL <- c(1, a) %*% gfmla.oracle$est[1:2]
ste.OL <- sqrt(c(1, a) %*% gfmla.oracle$var[1:2, 1:2] %*% c(1, a))
# (ii) naive GLM
est.NL <- c(1, a) %*% gfmla.naive$est[1:2]
ste.NL <- sqrt(c(1, a) %*% gfmla.naive$var[1:2, 1:2] %*% c(1, a))
# (iii) corrected GLM
est.CL <- c(1, a) %*% gfmla.mccs$est[1:2]
ste.CL <- sqrt(c(1, a) %*% gfmla.mccs$var[1:2, 1:2] %*% c(1, a))
tail(gfmla.oracle$est, 1)
est.OL
ste.OG <- sqrt(tail(diag(gfmla.oracle$var), 1))
ste.OG
ste.OL
ste.NL
ste.OL
ste.OG
est.OG <- tail(gfmla.oracle$est, 1)
ste.OG <- sqrt(tail(diag(gfmla.oracle$var), 1))
# (v) naive g-formula
est.NG <- tail(gfmla.naive$est, 1)
ste.NG <- sqrt(tail(diag(gfmla.naive$var), 1))
# (vi) corrected g-formula
est.CG <- tail(gfmla.mccs$est, 1)
ste.CG <- sqrt(tail(diag(gfmla.mccs$var), 1))
est.OG
est.CG
ste.CG
ste.OG
gfmla.oracle$var[1:2, 1:2]
c(1, a) %*% gfmla.oracle$var[1:2, 1:2]
c(1, a) %*% gfmla.oracle$var[1:2, 1:2] %*% c(1, a)
est.OL <- c(1, a) %*% gfmla.oracle$est[1:2]
ste.OL <- sqrt(c(1, a) %*% gfmla.oracle$var[1:2, 1:2] %*% c(1, a))
# (ii) naive GLM
est.NL <- c(1, a) %*% gfmla.naive$est[1:2]
ste.NL <- sqrt(c(1, a) %*% gfmla.naive$var[1:2, 1:2] %*% c(1, a))
# (iii) corrected GLM
est.CL <- c(1, a) %*% gfmla.mccs$est[1:2]
ste.CL <- sqrt(c(1, a) %*% gfmla.mccs$var[1:2, 1:2] %*% c(1, a))
# (iv) oracle g-formula
est.OG <- tail(gfmla.oracle$est, 1)
ste.OG <- sqrt(tail(diag(gfmla.oracle$var), 1))
# (v) naive g-formula
est.NG <- tail(gfmla.naive$est, 1)
ste.NG <- sqrt(tail(diag(gfmla.naive$var), 1))
# (vi) corrected g-formula
est.CG <- tail(gfmla.mccs$est, 1)
ste.CG <- sqrt(tail(diag(gfmla.mccs$var), 1))
est.NL
# combine results: estimates and std errors for 4 parameters
ret <- c(n, a, vare, B, seed,
est.OL, est.NL, est.CL,
est.OC, est.NC, est.CC,
ste.OL, ste.NL, ste.CL,
ste.OC, ste.NC, ste.CC)
# combine results: estimates and std errors for 4 parameters
ret <- c(n, a, var.e, B, seed,
est.OL, est.NL, est.CL,
est.OC, est.NC, est.CC,
ste.OL, ste.NL, ste.CL,
ste.OC, ste.NC, ste.CC)
# combine results: estimates and std errors for 4 parameters
ret <- c(n, a, var.e, B, seed,
est.OL, est.NL, est.CL,
est.OG, est.NG, est.CG,
ste.OL, ste.NL, ste.CL,
ste.OG, ste.NG, ste.CG)
ret
names(ret) <- c(
"n", "a", "vare", "B", "seed",
apply(tidyr::expand_grid(
c("est", "ste"),
c("OL", "NL", "CL", "OG", "NG", "CG"),
1:4), 1, paste, collapse="."))
c(
"n", "a", "vare", "B", "seed",
apply(tidyr::expand_grid(
c("est", "ste"),
c("OL", "NL", "CL", "OG", "NG", "CG")),
1, paste, collapse="."))
names(ret) <- c(
"n", "a", "vare", "B", "seed",
apply(tidyr::expand_grid(
c("est", "ste"),
c("OL", "NL", "CL", "OG", "NG", "CG")),
1, paste, collapse="."))
ret
library(rootSolve)
library(MASS)
library(mvtnorm)
library(tidyr)
source("R/estimating_functions.R")
source("R/fit_equations.R")
source("R/link_functions.R")
source("R/misc_helpers.R")
source("R/sandwich_estimation.R")
source("R/simulation.R")
source("R/model_matrix.R")
source("R/sandwich_estimation.R")
source("R/simulation.R")
# baseline seed (specific to cluster)
args <- 1#commandArgs(TRUE)
base.seed <- 10^6 * as.integer(args)
# number of sims per cluster
n.sim <- 1
# varied parameters
n <- 800                          # sample size
B <- 80                           # number of MC replicates
vare <- 0.25                      # measurement error variance for A1, A2
a <- 3                            # exposure at which to estimate E{Y(a)}
# create simulation input
sim.in <- expand.grid(n = n,
B = B,
vare = vare,
a = a,
sim.id = 1:n.sim + base.seed)
# run simulations
sim.out <- pbapply::pbvapply(
X = 1:nrow(sim.in),
FUN = function(ii) {
sim1(n = sim.in$n[ii],
B = sim.in$B[ii],
vare = sim.in$vare[ii],
a = sim.in$a[ii],
seed = sim.in$sim.id[ii])
},
FUN.VALUE = numeric(17)) |>
t()
# run simulations
sim.out <- pbapply::pbvapply(
X = 1:nrow(sim.in),
FUN = function(ii) {
sim.gfmla(n = sim.in$n[ii],
B = sim.in$B[ii],
vare = sim.in$vare[ii],
a = sim.in$a[ii],
seed = sim.in$sim.id[ii])
},
FUN.VALUE = numeric(17)) |>
t()
View(sim.out)
