pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# separate plots for each sample size
plot.by.a <- function(a.,
method. = names(method.labs),
n. = n,
vare. = vare) {
ggplot(
data = filter(sim.out.long,
a == a.,
method %in% method.,
n %in% n.,
vare %in% vare.),
aes(x = method,
y = est,
fill = method,
color = method)) +
geom_boxplot() +
stat_summary(fun = mean,
geom = "point",
shape = 8,
size = 2,
orientation = "x",
show.legend = F) +
geom_hline(aes(yintercept = EYa.true),
linetype = "dashed",
color = "orange") +
facet_grid(vare ~ n,
scales = "free",
labeller = labeller(n = n.labs,
vare = vare.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates"),
subtitle = paste0("a = ", a., "; ",
n.rep, " simulations per setting")) +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank()) +
scale_fill_manual(values = pal_light,
labels = method.labs) +
scale_color_manual(values = pal_dark,
labels = method.labs)
}
plot.by.a(a. = 0)
plot.by.a(a. = 1)
plot.by.a(a. = 2)
method. = names(method.labs)
n. = n
vare. = vare
a. = 0
ggplot(
data = filter(sim.out.long,
a == a.,
method %in% method.,
n %in% n.,
vare %in% vare.),
aes(x = method,
y = est,
fill = method,
color = method)) +
geom_boxplot() +
stat_summary(fun = mean,
geom = "point",
shape = 8,
size = 2,
orientation = "x",
show.legend = F) +
geom_hline(aes(yintercept = EYa.true),
linetype = "dashed",
color = "orange") +
facet_grid(vare ~ n,
scales = "free",
labeller = labeller(n = n.labs,
vare = vare.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates"),
subtitle = paste0("a = ", a., "; ",
n.rep, " simulations per setting")) +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank()) +
scale_fill_manual(values = pal_light,
labels = method.labs) +
scale_color_manual(values = pal_dark,
labels = method.labs)
a. = 1
ggplot(
data = filter(sim.out.long,
a == a.,
method %in% method.,
n %in% n.,
vare %in% vare.),
aes(x = method,
y = est,
fill = method,
color = method)) +
geom_boxplot() +
stat_summary(fun = mean,
geom = "point",
shape = 8,
size = 2,
orientation = "x",
show.legend = F) +
geom_hline(aes(yintercept = EYa.true),
linetype = "dashed",
color = "orange") +
facet_grid(vare ~ n,
scales = "free",
labeller = labeller(n = n.labs,
vare = vare.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates"),
subtitle = paste0("a = ", a., "; ",
n.rep, " simulations per setting")) +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank()) +
scale_fill_manual(values = pal_light,
labels = method.labs) +
scale_color_manual(values = pal_dark,
labels = method.labs)
a. = 2
ggplot(
data = filter(sim.out.long,
a == a.,
method %in% method.,
n %in% n.,
vare %in% vare.),
aes(x = method,
y = est,
fill = method,
color = method)) +
geom_boxplot() +
stat_summary(fun = mean,
geom = "point",
shape = 8,
size = 2,
orientation = "x",
show.legend = F) +
geom_hline(aes(yintercept = EYa.true),
linetype = "dashed",
color = "orange") +
facet_grid(vare ~ n,
scales = "free",
labeller = labeller(n = n.labs,
vare = vare.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates"),
subtitle = paste0("a = ", a., "; ",
n.rep, " simulations per setting")) +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank()) +
scale_fill_manual(values = pal_light,
labels = method.labs) +
scale_color_manual(values = pal_dark,
labels = method.labs)
View(sim.out.long)
View(sim.out.list)
View(sim.out)
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("est") | starts_with("ste"),
names_to = "method.aa",
values_to = "val") %>%
mutate(method = factor(substr(method.aa, 5, 6),
levels = c("OL", "OG",
"NL", "NG",
"CL", "CG")),
aa = factor(substr(method.aa, 8, 8)),
a = factor(a[aa]),
name = factor(substr(method.aa, 1, 3)),
EYa.true = EYa.true[aa])
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("est") | starts_with("ste"),
names_to = "method.aa",
values_to = "val") %>%
mutate(method = factor(substr(method.aa, 5, 6),
levels = c("OL", "OG",
"NL", "NG",
"CL", "CG")),
aa = factor(substr(method.aa, 8, 8)),
a = factor(a[aa]),
name = factor(substr(method.aa, 1, 3)),
EYa.true = EYa.true[aa]) %>%
dplyr::select(-method.aa)
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("est") | starts_with("ste"),
names_to = "method.aa",
values_to = "val") %>%
mutate(method = factor(substr(method.aa, 5, 6),
levels = c("OL", "OG",
"NL", "NG",
"CL", "CG")),
aa = factor(substr(method.aa, 8, 8)),
a = factor(a[aa]),
name = factor(substr(method.aa, 1, 3)),
EYa.true = EYa.true[aa]) %>%
dplyr::select(-method.aa) %>%
group_by(clust, n, B, vare, method, aa, a, name) %>%
mutate(id = row_number()) %>%
pivot_wider(names_from = name,
values_from = val,
id_cols = c(clust, n, B, vare, method, aa, a, EYa.true, id))
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("est") | starts_with("ste"),
names_to = "method.aa",
values_to = "val")
a <- 1:10                                       # exposure value of interest
EYa.true <- 0.4 * inv.logit(-2 + 0.7 * a) +    # true dose response curve at a
0.4 * inv.logit(-2.6 + 0.3 * a) +
0.1 * inv.logit(-1.6 + 0.5 * a) +
0.1 * inv.logit(-2.2 + 0.1 * a)
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("est") | starts_with("ste"),
names_to = "method.aa",
values_to = "val") %>%
mutate(method = factor(substr(method.aa, 5, 6),
levels = c("OL", "OG",
"NL", "NG",
"CL", "CG")),
aa = factor(substr(method.aa, 9, 10)),
a = factor(a[aa]),
name = factor(substr(method.aa, 1, 3)),
EYa.true = EYa.true[aa]) %>%
dplyr::select(-method.aa) %>%
group_by(clust, n, B, vare, method, aa, a, name) %>%
mutate(id = row_number()) %>%
pivot_wider(names_from = name,
values_from = val,
id_cols = c(clust, n, B, vare, method, aa, a, EYa.true, id))
# summarize proportion of missing data by setting
sim.out.long %>%
filter(aa == 1) %>%
group_by(method, n, B, vare) %>%
summarise(prop.error = mean(is.na(est))) %>%
filter(prop.error > 0) %>%
ungroup()
# extract simulation parameters
n <- unique(sim.out$n)
B <- unique(sim.out$B)
vare <- unique(sim.out$vare)
# make labels for plots
method.labs <- c("Oracle GLM",
"Naive GLM",
"Corrected GLM",
"Oracle G-Formula",
"Naive G-Formula",
"Corrected G-Formula")
names(method.labs) <- c("OL", "NL", "CL",
"OG", "NG", "CG")
n.labs <- paste0("n = ", n)
names(n.labs) <- n
B.labs <- paste0("B = ", B)
names(B.labs) <- B
a.labs <- paste0("a = ", a)
names(a.labs) <- a
vare.labs <- paste0("sigma_e = ", vare)
names(vare.labs) <- vare
# colorblind friendly pallette
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# separate plots for each sample size
plot.by.a <- function(a.,
method. = names(method.labs),
n. = n,
vare. = vare) {
ggplot(
data = filter(sim.out.long,
a == a.,
method %in% method.,
n %in% n.,
vare %in% vare.),
aes(x = method,
y = est,
fill = method,
color = method)) +
geom_boxplot() +
stat_summary(fun = mean,
geom = "point",
shape = 8,
size = 2,
orientation = "x",
show.legend = F) +
geom_hline(aes(yintercept = EYa.true),
linetype = "dashed",
color = "orange") +
facet_grid(vare ~ n,
scales = "free",
labeller = labeller(n = n.labs,
vare = vare.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates"),
subtitle = paste0("a = ", a., "; ",
n.rep, " simulations per setting")) +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank()) +
scale_fill_manual(values = pal_light,
labels = method.labs) +
scale_color_manual(values = pal_dark,
labels = method.labs)
}
plot.by.a(a. = 0)
plot.by.a(a. = 1)
plot.by.a(a. = 2)
plot.by.a(a. = 3)
plot.by.a(a. = 4)
plot.by.a(a. = 5)
plot.by.a(a. = 6)
plot.by.a(a. = 7)
plot.by.a(a. = 8)
plot.by.a(a. = 9)
plot.by.a(a. = 10)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(scales)
library(ggthemes)
library(kableExtra)
# true (beta, log s2)
B <- c(1, 2, log(1.1))
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/sim1/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
colnames(sim.out) <- c("clust", "n", "q", "x.shape", "c.shape",
"mx", "mc", "my", "seed",
"Bor1", "Bor2", "Bor3",
"Bcc1", "Bcc2", "Bcc3",
"Bml1", "Bml2", "Bml3",
"Bsp1", "Bsp2", "Bsp3")
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("B"),
names_to = "method.param",
values_to = "estimate") %>%
mutate(method = factor(substr(method.param, 2, 3),
levels = c("or", "cc", "ml", "sp")),
param = factor(substr(method.param, 4, 4)),
B.true = B[param])
View(sim.out.long)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(scales)
library(ggthemes)
library(kableExtra)
# true (beta, log s2)
B <- c(1, 2, log(1.1))
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/sim1/estetas_meanX0_25_shape0_25/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
colnames(sim.out) <- c("clust", "n", "q", "x.shape", "c.shape",
"mx", "mc", "my", "seed",
"Bor1", "Bor2", "Bor3",
"Bcc1", "Bcc2", "Bcc3",
"Bml1", "Bml2", "Bml3",
"Bsp1", "Bsp2", "Bsp3")
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("B"),
names_to = "method.param",
values_to = "estimate") %>%
mutate(method = factor(substr(method.param, 2, 3),
levels = c("or", "cc", "ml", "sp")),
param = factor(substr(method.param, 4, 4)),
B.true = B[param])
# check for simulations with errors
sim.out.long %>%
filter(param == 1) %>%
group_by(q, n, x.shape, c.shape, method) %>%
summarize(prop.error = mean(is.na(estimate))) %>%
filter(prop.error > 0) %>%
kable(digits = 3) %>%
kable_styling("striped")
# check for simulations with errors
sim.out.long %>%
filter(param == 1) %>%
group_by(q, n, x.shape, c.shape, method) %>%
summarize(prop.error = mean(is.na(estimate))) %>%
filter(prop.error > 0) %>%
kable(digits = 3) %>%
kable_styling("striped")
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(scales)
library(ggthemes)
library(kableExtra)
# true (beta, log s2)
B <- c(1, 2, log(1.1))
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/sim1/estetas_meanX0_25_shape0_25/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
colnames(sim.out) <- c("clust", "n", "q", "x.shape", "c.shape",
"mx", "mc", "my", "seed",
"Bor1", "Bor2", "Bor3",
"Bcc1", "Bcc2", "Bcc3",
"Bml1", "Bml2", "Bml3",
"Bsp1", "Bsp2", "Bsp3")
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("B"),
names_to = "method.param",
values_to = "estimate") %>%
mutate(method = factor(substr(method.param, 2, 3),
levels = c("or", "cc", "ml", "sp")),
param = factor(substr(method.param, 4, 4)),
B.true = B[param])
# check for simulations with errors
sim.out.long %>%
filter(param == 1) %>%
group_by(q, n, x.shape, c.shape, method) %>%
summarize(prop.error = mean(is.na(estimate))) %>%
filter(prop.error > 0) %>%
kable(digits = 3) %>%
kable_styling("striped")
setwd("C:/Users/Brian Richardson/OneDrive - University of North Carolina at Chapel Hill/Desktop/Garcia Lab/Research/Projects-Active/HDSP/sparcc")
setwd("C:/Users/Brian Richardson/OneDrive - University of North Carolina at Chapel Hill/Desktop/Garcia Lab/Research/Projects-Active/HDSP/sparcc/simulation")
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(scales)
library(ggthemes)
library(kableExtra)
# true (beta, log s2)
B <- c(1, 2, log(1.1))
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/sim1/estetas_meanX0_25_shape0_25/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
colnames(sim.out) <- c("clust", "n", "q", "x.shape", "c.shape",
"mx", "mc", "my", "seed",
"Bor1", "Bor2", "Bor3",
"Bcc1", "Bcc2", "Bcc3",
"Bml1", "Bml2", "Bml3",
"Bsp1", "Bsp2", "Bsp3")
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("B"),
names_to = "method.param",
values_to = "estimate") %>%
mutate(method = factor(substr(method.param, 2, 3),
levels = c("or", "cc", "ml", "sp")),
param = factor(substr(method.param, 4, 4)),
B.true = B[param])
# check for simulations with errors
sim.out.long %>%
filter(param == 1) %>%
group_by(q, n, x.shape, c.shape, method) %>%
summarize(prop.error = mean(is.na(estimate))) %>%
filter(prop.error > 0) %>%
kable(digits = 3) %>%
kable_styling("striped")
View(sim.out.long)
sim.out.long %>%
filter(param == 1) %>%
group_by(q, n, x.shape, c.shape, method) %>%
summarize(prop.error = mean(is.na(estimate))) %>%
filter(prop.error > 0) %>%
kable(digits = 3) %>%
kable_styling("striped")
