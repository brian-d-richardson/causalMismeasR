axis.text.x = element_blank()) +
scale_fill_manual(values = pal_light,
labels = method.labs) +
scale_color_manual(values = pal_dark,
labels = method.labs)
}
plot.by.var()
tbl <- sim.out.long %>%
group_by(param, method, n, B, vare) %>%
summarise(bias = mean(ghat - g.true, na.rm = T),
emp.se = sd(ghat, na.rm = T),
est.se = mean(stde)) %>%
gather(key, value, bias:est.se) %>%
unite(Group, param, key) %>%
spread(Group, value)
setNames(tbl, sub(".+_", "", names(tbl))) %>%
kable(digits = 3) %>%
kable_styling("striped") %>%
add_header_above(c(" " = 4,
"Component 1" = 3,
"Component 2" = 3,
"Component 3" = 3,
"Component 4" = 3))
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(kableExtra)
# load simulation results from each of 10 clusters
setwd(dirname(getwd()))
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/sim3_ipw_nonlinearps/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
# true MSM parameters
g <- c(2, 1.5, -1.5)
# number of sims per setting
n.rep <- nrow(sim.out) / n_distinct(dplyr::select(sim.out, n, B, vare))
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("ghat") |
starts_with("stde") |
starts_with("bste"),
names_to = "method.param",
values_to = "val") %>%
mutate(method = factor(substr(method.param, 6, 7),
levels = c("OI", "NI", "RI", "SI", "CI"),
labels = c("Oracle IPW",
"Naive IPW",
"Reg. Cal. IPW",
"SIMEX IPW",
"IPW CS")),
param = factor(substr(method.param, 9, 9)),
name = factor(substr(method.param, 1, 4)),
g.true = g[param]) %>%
dplyr::select(-method.param) %>%
group_by(clust, n, B, vare, method, param, name) %>%
mutate(id = row_number()) %>%
pivot_wider(names_from = name,
values_from = val,
id_cols = c(clust, n, B, vare, method,
param, g.true, id)) %>%
mutate(ci.lower = ghat - qnorm(0.975) * stde,
ci.upper = ghat + qnorm(0.975) * stde,
ci.cov = g.true >= ci.lower & g.true <= ci.upper,
bcci.lower = ghat - qnorm(0.975) * bste,
bcci.upper = ghat + qnorm(0.975) * bste,
bcci.cov = g.true >= bcci.lower & g.true <= bcci.upper)
# summarize proportion of missing data by setting
sim.out.long %>%
filter(param == 1) %>%
group_by(method, n, vare, B) %>%
summarise(prop.error = mean(is.na(ghat))) %>%
filter(prop.error > 0) %>%
ungroup()
# extract simulation parameters
n <- unique(sim.out$n)
B <- unique(sim.out$B)
vare <- unique(sim.out$vare)
# make labels for plots
n.labs <- paste0("n = ", n)
names(n.labs) <- n
B.labs <- paste0("B = ", B)
names(B.labs) <- B
vare.labs <- paste0("var(e) = ", vare)
names(vare.labs) <- vare
n.labs <- paste0("n = ", n)
names(n.labs) <- n
param.labs <- paste0("\u03b3", c("0", "1", "2", "3"))
names(param.labs) <- 1:4
# colorblind friendly pallette
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# create plots
make.plot <- function(title = T, y.lim = Inf, vare. = vare) {
plot <- sim.out.long %>%
filter(abs(ghat - g.true) < y.lim,
vare %in% vare.) %>%
ggplot(
aes(x = method,
y = ghat,
fill = method,
color = method)) +
geom_boxplot() +
stat_summary(fun = mean,
geom = "point",
shape = 8,
size = 2,
orientation = "x",
show.legend = F) +
geom_hline(aes(yintercept = g.true),
linetype = "dashed",
color = "orange") +
#facet_nested(param ~ vare + B + n,
#             scales = "free",
#             labeller = labeller(n = n.labs,
#                                 vare = vare.labs,
#                                 B = B.labs,
#                                 param = param.labs)) +
facet_grid(n ~ param,
scales = "free",
labeller = labeller(n = n.labs,
param = param.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
legend.position = "bottom") +
scale_fill_manual(values = pal_light) +
scale_color_manual(values = pal_dark)
if (title) {
plot <- plot +
ggtitle(paste0("Empirical Distribution of Parameter Estimates"),
subtitle = paste0(n.rep, " simulations per setting"))
}
return(plot)
}
make.plot()
tbl <- sim.out.long %>%
filter(n %in% c(800, 8000)) %>%
mutate(Param = paste0("$\\gamma_", as.numeric(param) - 1, "$")) %>%
group_by(n, method, Param) %>%
summarise(bias = 100 * mean(ghat - g.true),
emp.se = 100 * sd(ghat),
est.se = 100 * mean(stde),
ci.cov = 100 * mean(ci.cov),
bcest.se = 100 * mean(bste),
bcci.cov = 100 * mean(bcci.cov))
kbl <- tbl %>%
kable(format = "latex",
digits = c(0, 0, 0,
1, 1,
1, 1,
1, 1),
align = c(rep("c", 3 + 2),
rep("r", 4)),
booktabs = TRUE,
linesep = c("", "", "\\addlinespace"),
escape = FALSE,
col.names = c("n", "Method", "Parameter",
"Bias", "ESE",
"ASE", "Cov",
"ASE", "Cov")) %>%
add_header_above(c(" " = 5 + 2,
"UC" = 2,
"BC" = 2)) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
print(kbl)
sim.out.long %>%
filter(n %in% c(800, 8000)) %>%
group_by(n, method, param) %>%
summarise(emp.se = sd(ghat)) %>%
inner_join(sim.out.long,
by = c("n", "method", "param")) %>%
ggplot(
aes(x = method,
y = stde,
fill = method,
color = method)) +
geom_boxplot(alpha = 0.5, outlier.size = 0.5) +
geom_point(aes(y = emp.se),
shape = 2, stroke = 1) +
stat_summary(fun = mean,
geom = "point",
shape = 8,
size = 2,
orientation = "x",
show.legend = F) +
facet_grid(n ~ param,
scales = "free",
labeller = labeller(n = n.labs,
param = param.labs)) +
labs(y = "Estimated Std Error",
fill = "Method",
color = "Method") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
legend.position = "bottom") +
scale_fill_manual(values = pal_light) +
scale_color_manual(values = pal_dark) +
scale_y_continuous(trans = "log10")
# plot estimated standard errors
sim.out.long %>%
filter(n %in% c(800, 8000)) %>%
group_by(n, method, param) %>%
summarise(emp.se = sd(ghat)) %>%
inner_join(sim.out.long,
by = c("n", "method", "param")) %>%
ggplot(
aes(x = method,
y = log(stde),
fill = method,
color = method)) +
geom_boxplot(alpha = 0.5, outlier.size = 0.5) +
geom_point(aes(y = log(emp.se)),
shape = 2, stroke = 1) +
facet_grid(n ~ param,
scales = "free",
labeller = labeller(n = n.labs,
param = param.labs)) +
labs(y = "Estimated Std Error",
fill = "Method",
color = "Method") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
legend.position = "bottom") +
scale_fill_manual(values = pal_light) +
scale_color_manual(values = pal_dark)
# plot confidence intervals
sim.out.long %>%
filter(method == "Oracle IPW",
param == 1,
n == 8000) %>%
arrange(by = ghat) %>%
ungroup() %>%
mutate(rn = row_number()) %>%
ggplot(aes(y = rn,
x = ghat,
xmin = ci.lower,
xmax = ci.upper,
color = ci.cov)) +
geom_pointrange(size = 0.01, linewidth = 1) +
geom_point(size = 2) +
geom_vline(aes(xintercept = g.true),
color = "black",
linetype = "dashed") +
labs(y = "",
x = "Mean (95% CI)")
# plot confidence intervals
sim.out.long %>%
filter(method == "Oracle IPW",
param == 1,
n == 8000) %>%
arrange(by = ghat) %>%
ungroup() %>%
mutate(rn = row_number()) %>%
ggplot(aes(y = rn,
x = ghat,
xmin = ci.lower,
xmax = ci.upper,
color = ci.cov)) +
geom_pointrange(size = 0.01, linewidth = 1) +
geom_point(size = 2, color = "black") +
geom_vline(aes(xintercept = g.true),
color = "black",
linetype = "dashed") +
labs(y = "",
x = "Mean (95% CI)")
tbl <- sim.out.long %>%
filter(n %in% c(800, 8000),
abs(ghat - g.true) < 1) %>%
mutate(Param = paste0("$\\gamma_", as.numeric(param) - 1, "$")) %>%
group_by(n, method, Param) %>%
summarise(bias = 100 * mean(ghat - g.true),
emp.se = 100 * sd(ghat),
est.se = 100 * mean(stde),
ci.cov = 100 * mean(ci.cov),
bcest.se = 100 * mean(bste),
bcci.cov = 100 * mean(bcci.cov))
View(tbl)
tbl <- sim.out.long %>%
filter(n %in% c(800, 8000),
abs(ghat - g.true) < 0.5) %>%
mutate(Param = paste0("$\\gamma_", as.numeric(param) - 1, "$")) %>%
group_by(n, method, Param) %>%
summarise(bias = 100 * mean(ghat - g.true),
emp.se = 100 * sd(ghat),
est.se = 100 * mean(stde),
ci.cov = 100 * mean(ci.cov),
bcest.se = 100 * mean(bste),
bcci.cov = 100 * mean(bcci.cov))
library(MASS); library(devtools); load_all()
library(MASS); library(devtools); load_all()
setwd("C:/Users/Brian Richardson/OneDrive - University of North Carolina at Chapel Hill/Desktop/CFAR/Projects in Progress/Confounding and Measurement Error/mismex")
library(MASS); library(devtools); load_all()
n = 800; vare = 0.09; B = 80; seed = 1;
gg <- c(2, 1.5, -1.5, -2, 1, 1)                # Y|A,L parameters
ipw.formula <- "~A1 + A2"                      # MSM formula
ps.formula <- "~L+ I(L^2)"                     # PS model formula
inv.link <- inv.ident;                         # MSM link function
d.inv.link <- d.inv.ident;                     # MSM derivative of link
cov.e <- diag(c(vare, vare))                   # measurement error variance
mc.seed <- 123                                 # MCCS seed value
coef.a.l <- matrix(                            # coefs in A|L model
data = c(0, 0,
0, 0,
1, -1),
nrow = 3, byrow = T)
var.a.l <- c(0.25, 0.25)                       # variance of A|L
# simulate data -----------------------------------------------------------
set.seed(seed)                                 # seed for reproducibility
L <- rnorm(n, 0, 0.36)                         # confounder
A <- mvrnorm(n = n,                            # true exposure
mu = c(0, 0),
Sigma = diag(var.a.l)) +
cbind(1, L, L^2) %*% coef.a.l
colnames(A) = paste0("A", 1:2)
Astar <- A + mvrnorm(n = n,                    # mismeasured exposure
m = c(0, 0),
Sigma = cov.e)
Y_mean <- cbind(1, A, L, A*L) %*% gg           # mean of outcome Y
Y <- rnorm(n, 0, 1) + Y_mean                  # outcome Y
colnames(A) <- colnames(Astar) <- c("A1", "A2")
dat0 <- data.frame(Y, A, L)                    # oracle data
datstar <- data.frame(Y, Astar, L)             # mismeasured data
apply(A, 2, var) / apply(Astar, 2, var)
plot(A[,1], L)
plot(A[,1], L); plot(A[,2], L)
plot(A[,1], L); plot(A[,2], L); apply(A, 2, var) / apply(Astar, 2, var)
var.a.l <- c(0.16, 0.16)                       # variance of A|L
set.seed(seed)                                 # seed for reproducibility
L <- rnorm(n, 0, 0.36)                         # confounder
A <- mvrnorm(n = n,                            # true exposure
mu = c(0, 0),
Sigma = diag(var.a.l)) +
cbind(1, L, L^2) %*% coef.a.l
colnames(A) = paste0("A", 1:2)
Astar <- A + mvrnorm(n = n,                    # mismeasured exposure
m = c(0, 0),
Sigma = cov.e)
Y_mean <- cbind(1, A, L, A*L) %*% gg           # mean of outcome Y
Y <- rnorm(n, 0, 1) + Y_mean                  # outcome Y
colnames(A) <- colnames(Astar) <- c("A1", "A2")
dat0 <- data.frame(Y, A, L)                    # oracle data
datstar <- data.frame(Y, Astar, L)             # mismeasured data
plot(A[,1], L); plot(A[,2], L); apply(A, 2, var) / apply(Astar, 2, var)
plot(A[,1], L);
plot(L, A[,2])
plot(L, A[,1])
var.a.l <- c(0.09, 0.09)                       # variance of A|L
set.seed(seed)                                 # seed for reproducibility
L <- rnorm(n, 0, 0.36)                         # confounder
A <- mvrnorm(n = n,                            # true exposure
mu = c(0, 0),
Sigma = diag(var.a.l)) +
cbind(1, L, L^2) %*% coef.a.l
colnames(A) = paste0("A", 1:2)
Astar <- A + mvrnorm(n = n,                    # mismeasured exposure
m = c(0, 0),
Sigma = cov.e)
Y_mean <- cbind(1, A, L, A*L) %*% gg           # mean of outcome Y
Y <- rnorm(n, 0, 1) + Y_mean                  # outcome Y
colnames(A) <- colnames(Astar) <- c("A1", "A2")
dat0 <- data.frame(Y, A, L)                    # oracle data
datstar <- data.frame(Y, Astar, L)             # mismeasured data
plot(L, A[,1]); plot(L, A[,2]); apply(A, 2, var) / apply(Astar, 2, var)
plot(L, A[,2])
plot(L, A[,1])
vare = 0.05;
gg <- c(2, 1.5, -1.5, -2, 1, 1)                # Y|A,L parameters
ipw.formula <- "~A1 + A2"                      # MSM formula
ps.formula <- "~L+ I(L^2)"                     # PS model formula
inv.link <- inv.ident;                         # MSM link function
d.inv.link <- d.inv.ident;                     # MSM derivative of link
cov.e <- diag(c(vare, vare))                   # measurement error variance
mc.seed <- 123                                 # MCCS seed value
coef.a.l <- matrix(                            # coefs in A|L model
data = c(0, 0,
0, 0,
1, -1),
nrow = 3, byrow = T)
var.a.l <- c(0.09, 0.09)                       # variance of A|L
set.seed(seed)                                 # seed for reproducibility
L <- rnorm(n, 0, 0.36)                         # confounder
A <- mvrnorm(n = n,                            # true exposure
mu = c(0, 0),
Sigma = diag(var.a.l)) +
cbind(1, L, L^2) %*% coef.a.l
colnames(A) = paste0("A", 1:2)
Astar <- A + mvrnorm(n = n,                    # mismeasured exposure
m = c(0, 0),
Sigma = cov.e)
Y_mean <- cbind(1, A, L, A*L) %*% gg           # mean of outcome Y
Y <- rnorm(n, 0, 1) + Y_mean                  # outcome Y
colnames(A) <- colnames(Astar) <- c("A1", "A2")
dat0 <- data.frame(Y, A, L)                    # oracle data
datstar <- data.frame(Y, Astar, L)             # mismeasured data
plot(L, A[,1]); plot(L, A[,2]); apply(A, 2, var) / apply(Astar, 2, var)
len.A <- ncol(A)                               # dimension of A
mean.a <- colMeans(A)                          # marginal mean of A
cov.a <- cov(A)                                # marginal covariance of A
args.ipw <- list(formula = ipw.formula,        # arguments for fitting IPW
ps.formula = ps.formula,
inv.link = inv.link,
d.inv.link = d.inv.link)
# estimate means and covariances
E.A <- colMeans(datstar[,c("A1","A2")])            # E(A)                          # E(A)
E.L <- mean(datstar$L)                             # E(L)
Sigma.AA <- cov(datstar[,c("A1","A2")]) - cov.e    # Cov(A)
Sigma.LA <- cov(datstar[,c("A1","A2")], datstar$L) # Cov(A, L)
Sigma.LL <- var(datstar$L)                         # Cov(L)
# estimate E(A | Astar, L)
E.A.AstarL <- E.A + t(
cbind(Sigma.AA, Sigma.LA) %*%
solve(rbind(cbind(Sigma.AA + cov.e, Sigma.LA),
cbind(t(Sigma.LA), Sigma.LL))) %*%
t(as.matrix(datstar[,c("A1", "A2", "L")] -
do.call(rbind, replicate(n, c(E.A, E.L), simplify = F)))))
# create data set for regression calibration
datrc <- data.frame(Y,
A1 = E.A.AstarL[,1],
A2 = E.A.AstarL[,2],
L)
# (i) naive IPW estimator
res.NI <- fit.ipw(data = datstar,
args = args.ipw)
# (ii) oracle IPW estimator
res.OI <- fit.ipw(data = dat0,
args = args.ipw,
start = res.NI$est[1:3])
# (iii) regression calibration IPW estimator
res.RI <- fit.ipw(data = datrc,
args = args.ipw,
start = res.NI$est[1:3])
# (iv) MCCS IPW estimator
res.CI <- fit.ipw.mccs(data = datstar,
args = args.ipw,
cov.e = cov.e, B = B, mc.seed = mc.seed,
mean.a = colMeans(Astar),
cov.a = cov(Astar) - cov.e,
start = res.NI$est[1:3])
# (v) SIMEX IPW estimator
xi <- seq(0, 2, length = 10) # sequence of xi values
K <- 20 # number of reps per xi value                # number of reps per xi value
simex.in <- rbind(
c(xi = 0, k = 1),
expand.grid(
xi = tail(xi, -1),
k = 1:K))
simex.ests <- t(vapply(
X = 1:nrow(simex.in),
FUN.VALUE = numeric(5),
FUN = function(jj) {
dat_jk <- datstar
dat_jk[,c("A1", "A2")] <- dat_jk[,c("A1", "A2")] +
mvrnorm(n = n, m = c(0, 0), Sigma = cov.e * simex.in$xi[jj])
res_jk <- fit.ipw(data = dat_jk,
args = args.ipw,
start = res.NI$est[1:3],
return.var = F,
return.bcvar = F)
c(xi = simex.in$xi[jj],
k = simex.in$k[jj],
res_jk$est[1:3])
}
)) %>%
as.data.frame() %>%
pivot_longer(cols = !c(xi, k))
extrap.model <- lm(                    # extrapolation model
data = simex.ests,
formula = value ~ name + xi + I(xi^2))
res.SI <- predict(                     # extrapolation to xi = -1
extrap.model,
newdata = expand.grid(xi = -1, name = unique(simex.ests$name))
)
ret <- c(
n, vare, B, seed,
res.OI$est[1:3], res.NI$est[1:3],
res.RI$est[1:3], res.SI,
res.CI$est[1:3],
sqrt(c(
diag(res.OI$var)[1:3], diag(res.NI$var)[1:3],
diag(res.RI$var)[1:3], rep(NA, 3),
diag(res.CI$var)[1:3],
diag(res.OI$bc.var)[1:3], diag(res.NI$bc.var)[1:3],
diag(res.RI$bc.var)[1:3], rep(NA, 3),
diag(res.CI$bc.var)[1:3]
)))
names(ret) <- c(
"n", "vare", "B", "seed",
apply(tidyr::expand_grid(
c("ghat", "stde", "bste"),
c("OI", "NI", "RI", "SI", "CI"),
1:3), 1, paste, collapse="."))
# return named numeric vector of length: 49
return(ret)
round(ret, 2)
g
