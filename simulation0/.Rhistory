est.se = 100 * mean(stde),
ci.cov = 100 * mean(ci.cov, na.rm = T),
bcest.se = 100 * mean(bste, na.rm = T),
bcci.cov = 100 * mean(bcci.cov, na.rm = T))
kbl <- tbl %>%
kable(format = "latex",
digits = c(0, 0,
0, 0, 0,
1, 1,
1, 1,
1, 1),
align = c(rep("c", 3 + 2),
rep("r", 4)),
booktabs = TRUE,
linesep = c("", "", "\\addlinespace"),
escape = FALSE,
col.names = c("Var(e)", "B", "n", "Method", "Parameter",
"Bias", "ESE",
"ASE", "Cov",
"ASE", "Cov")) %>%
add_header_above(c(" " = 5 + 2,
"UC" = 2,
"BC" = 2)) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
tbl
View(tbl)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(kableExtra)
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/ipw_nonlinearps_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
# true MSM parameters
g <- c(2, 1.5, -1.5)
# number of sims per setting
n.rep <- nrow(sim.out) / n_distinct(dplyr::select(sim.out, n, B, vare))
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("ghat") |
starts_with("stde") |
starts_with("bste"),
names_to = "method.param",
values_to = "val") %>%
mutate(method = factor(substr(method.param, 6, 7),
levels = c("OI", "NI", "RI", "SI", "CI"),
labels = c("Oracle IPW",
"Naive IPW",
"Reg. Cal. IPW",
"SIMEX IPW",
"IPW CS")),
param = factor(substr(method.param, 9, 9)),
name = factor(substr(method.param, 1, 4)),
g.true = g[param]) %>%
dplyr::select(-method.param) %>%
group_by(clust, n, B, vare, method, param, name) %>%
mutate(id = row_number()) %>%
pivot_wider(names_from = name,
values_from = val,
id_cols = c(clust, n, B, vare, method,
param, g.true, id)) %>%
mutate(ci.lower = ghat - qnorm(0.975) * stde,
ci.upper = ghat + qnorm(0.975) * stde,
ci.cov = g.true >= ci.lower & g.true <= ci.upper,
bcci.lower = ghat - qnorm(0.975) * bste,
bcci.upper = ghat + qnorm(0.975) * bste,
bcci.cov = g.true >= bcci.lower & g.true <= bcci.upper)
# summarize proportion of missing data by setting
sim.out.long %>%
filter(param == 1) %>%
group_by(method, n, vare, B) %>%
summarise(prop.error = mean(is.na(ghat))) %>%
filter(prop.error > 0) %>%
ungroup()
# extract simulation parameters
n <- unique(sim.out$n)
B <- unique(sim.out$B)
vare <- unique(sim.out$vare)
# make labels for plots
n.labs <- paste0("n = ", n)
names(n.labs) <- n
B.labs <- paste0("B = ", B)
names(B.labs) <- B
vare.labs <- paste0("var(e) = ", vare)
names(vare.labs) <- vare
n.labs <- paste0("n = ", n)
names(n.labs) <- n
param.labs <- paste0("\u03b3", c("0", "1", "2", "3"))
names(param.labs) <- 1:4
# colorblind friendly pallette
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# create plots
make.plot <- function(title = T, y.lim = Inf, vare. = vare) {
plot <- sim.out.long %>%
filter(abs(ghat - g.true) < y.lim,
vare %in% vare.) %>%
ggplot(
aes(x = method,
y = ghat,
fill = method,
color = method)) +
geom_boxplot() +
stat_summary(fun = mean,
geom = "point",
shape = 8,
size = 2,
orientation = "x",
show.legend = F) +
geom_hline(aes(yintercept = g.true),
linetype = "dashed",
color = "orange") +
facet_nested(param ~ vare + B + n,
scales = "free",
labeller = labeller(n = n.labs,
vare = vare.labs,
B = B.labs,
param = param.labs)) +
#facet_grid(n ~ param,
#           scales = "free",
#           labeller = labeller(n = n.labs,
#                               param = param.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
legend.position = "bottom") +
scale_fill_manual(values = pal_light) +
scale_color_manual(values = pal_dark)
if (title) {
plot <- plot +
ggtitle(paste0("Empirical Distribution of Parameter Estimates"),
subtitle = paste0(n.rep, " simulations per setting"))
}
return(plot)
}
make.plot()
tbl <- sim.out.long %>%
filter(n %in% c(800, 8000)) %>%
mutate(Param = paste0("$\\gamma_", as.numeric(param) - 1, "$")) %>%
group_by(vare, B, n, method, Param) %>%
summarise(bias = 100 * mean(ghat - g.true, na.rm = T),
emp.se = 100 * sd(ghat, na.rm = T),
est.se = 100 * mean(stde),
ci.cov = 100 * mean(ci.cov, na.rm = T),
bcest.se = 100 * mean(bste, na.rm = T),
bcci.cov = 100 * mean(bcci.cov, na.rm = T))
tbl
kbl
kbl <- tbl %>%
kable(format = "latex",
digits = c(0, 0,
0, 0, 0,
1, 1,
1, 1,
1, 1),
align = c(rep("c", 3 + 2),
rep("r", 4)),
booktabs = TRUE,
linesep = c("", "", "\\addlinespace"),
escape = FALSE,
col.names = c("Var(e)", "B", "n", "Method", "Parameter",
"Bias", "ESE",
"ASE", "Cov",
"ASE", "Cov")) %>%
add_header_above(c(" " = 5 + 2,
"UC" = 2,
"BC" = 2)) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
kbl
tbl <- sim.out.long %>%
filter(n %in% c(800, 8000)) %>%
mutate(Param = paste0("$\\gamma_", as.numeric(param) - 1, "$")) %>%
group_by(B, n, method, Param) %>%
summarise(bias = 100 * mean(ghat - g.true, na.rm = T),
emp.se = 100 * sd(ghat, na.rm = T),
est.se = 100 * mean(stde),
ci.cov = 100 * mean(ci.cov, na.rm = T),
bcest.se = 100 * mean(bste, na.rm = T),
bcci.cov = 100 * mean(bcci.cov, na.rm = T))
tbl <- sim.out.long %>%
filter(n %in% c(800, 8000)) %>%
mutate(Param = paste0("$\\gamma_", as.numeric(param) - 1, "$")) %>%
group_by(n, method, Param) %>%
summarise(bias = 100 * mean(ghat - g.true, na.rm = T),
emp.se = 100 * sd(ghat, na.rm = T),
est.se = 100 * mean(stde),
ci.cov = 100 * mean(ci.cov, na.rm = T),
bcest.se = 100 * mean(bste, na.rm = T),
bcci.cov = 100 * mean(bcci.cov, na.rm = T))
kbl <- tbl %>%
kable(format = "latex",
digits = c(0, 0, 0,
1, 1,
1, 1,
1, 1),
align = c(rep("c", 3 + 2),
rep("r", 4)),
booktabs = TRUE,
linesep = c("", "", "\\addlinespace"),
escape = FALSE,
col.names = c("n", "Method", "Parameter",
"Bias", "ESE",
"ASE", "Cov",
"ASE", "Cov")) %>%
add_header_above(c(" " = 5 + 2,
"UC" = 2,
"BC" = 2)) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
kbl
kbl <- tbl %>%
kable(format = "latex",
digits = c(0, 0, 0,
1, 1,
1, 1,
1, 1),
align = c(rep("c", 3 + 2),
rep("r", 4)),
booktabs = TRUE,
linesep = c("", "", "", "\\addlinespace"),
escape = FALSE,
col.names = c("n", "Method", "Parameter",
"Bias", "ESE",
"ASE", "Cov",
"ASE", "Cov")) %>%
add_header_above(c(" " = 5 + 2,
"UC" = 2,
"BC" = 2)) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
kbl
kbl <- tbl %>%
kable(format = "latex",
digits = c(0, 0, 0,
1, 1,
1, 1,
1, 1),
align = c(rep("c", 3 + 2),
rep("r", 4)),
booktabs = TRUE,
linesep = c("", "", "\\addlinespace"),
escape = FALSE,
col.names = c("n", "Method", "Parameter",
"Bias", "ESE",
"ASE", "Cov",
"ASE", "Cov")) %>%
add_header_above(c(" " = 5 + 2,
"UC" = 2,
"BC" = 2)) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
kb
kbl
View(sim.out.long)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(kableExtra)
library(devtools)
load_all()
# true estimand
g <- 0.75
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/dr_nonlinearps_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list) %>%
mutate(g.true = g,
ci.lower = est - qnorm(0.975) * se,
ci.upper = est + qnorm(0.975) * se,
ci.cov = g.true >= ci.lower & g.true <= ci.upper,
bcci.lower = est - qnorm(0.975) * bse,
bcci.upper = est + qnorm(0.975) * bse,
bcci.cov = g.true >= bcci.lower & g.true <= bcci.upper,
method = factor(method,
levels = c("gfmla", "ipw", "dr"),
labels = c("G-Formula", "IPW", "DR")),
type = factor(type,
levels = c("oracle", "naive", "rc", "mccs"),
labels = c("Oracle", "Naive", "Reg. Cal.", "MCCS")),
spec = factor(ifelse(ps == 0 & out == 0, "PS and OR",
ifelse(ps == 0 & out == 1, "PS",
ifelse(ps == 1 & out == 0, "OR", "Neither"))),
levels = c("PS and OR", "PS", "OR", "Neither")),
ps = factor(ps,
levels = c(0, 1),
labels = c("PS Correct", "PS Incorrect")),
out = factor(out,
levels = c(0, 1),
labels = c("Outcome Correct", "Outcome Incorrect")))
# number of sims per setting
n.rep <- nrow(sim.out) /
n_distinct(dplyr::select(sim.out, n, method, type, ps, out))
# summarize proportion of missing data by setting
sim.out %>%
group_by(n, method, type, ps, out) %>%
summarise(prop.error = mean(is.na(est))) %>%
filter(prop.error > 0) %>%
ungroup()
# colorblind friendly pallette
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# separate plots for each sample size
make.plot <- function(n. = 2000, vare. = 0.16) {
sim.out %>%
filter(n == n.,
vare == vare.) %>%
ggplot(aes(x = type,
y = est,
fill = type,
color = type)) +
geom_boxplot() +
geom_hline(yintercept = g,
linetype = "dashed",
color = "orange") +
facet_grid(method ~ ps + out, scales = "free") +
labs(y = "Parameter Estimate",
fill = "Type",
color = "Type") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates"),
subtitle = paste0("n = ", n., "; ",
n.rep, " simulations per setting")) +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank()) +
scale_fill_manual(values = pal_light) +
scale_color_manual(values = pal_dark)
}
make.plot(vare. = 0.25)
make.plot(vare. = 0.36)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(kableExtra)
library(devtools)
load_all()
# true estimand
g <- 0.75
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/dr_nonlinearps_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list) %>%
mutate(g.true = g,
ci.lower = est - qnorm(0.975) * se,
ci.upper = est + qnorm(0.975) * se,
ci.cov = g.true >= ci.lower & g.true <= ci.upper,
bcci.lower = est - qnorm(0.975) * bse,
bcci.upper = est + qnorm(0.975) * bse,
bcci.cov = g.true >= bcci.lower & g.true <= bcci.upper,
method = factor(method,
levels = c("gfmla", "ipw", "dr"),
labels = c("G-Formula", "IPW", "DR")),
type = factor(type,
levels = c("oracle", "naive", "rc", "mccs"),
labels = c("Oracle", "Naive", "Reg. Cal.", "MCCS")),
spec = factor(ifelse(ps == 0 & out == 0, "PS and OR",
ifelse(ps == 0 & out == 1, "PS",
ifelse(ps == 1 & out == 0, "OR", "Neither"))),
levels = c("PS and OR", "PS", "OR", "Neither")),
ps = factor(ps,
levels = c(0, 1),
labels = c("PS Correct", "PS Incorrect")),
out = factor(out,
levels = c(0, 1),
labels = c("Outcome Correct", "Outcome Incorrect")))
# number of sims per setting
n.rep <- nrow(sim.out) /
n_distinct(dplyr::select(sim.out, n, method, type, ps, out))
# summarize proportion of missing data by setting
sim.out %>%
group_by(n, method, type, ps, out) %>%
summarise(prop.error = mean(is.na(est))) %>%
filter(prop.error > 0) %>%
ungroup()
# colorblind friendly pallette
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# separate plots for each sample size
make.plot <- function(n. = 2000, vare. = 0.16) {
sim.out %>%
filter(n == n.,
vare == vare.) %>%
ggplot(aes(x = type,
y = est,
fill = type,
color = type)) +
geom_boxplot() +
geom_hline(yintercept = g,
linetype = "dashed",
color = "orange") +
facet_grid(method ~ ps + out, scales = "free") +
labs(y = "Parameter Estimate",
fill = "Type",
color = "Type") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates"),
subtitle = paste0("n = ", n., "; ",
n.rep, " simulations per setting")) +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank()) +
scale_fill_manual(values = pal_light) +
scale_color_manual(values = pal_dark)
}
make.plot(vare. = 0.25)
make.plot(vare. = 0.36)
tbl <- sim.out %>%
filter(type == "MCCS",
n == 2000) %>%
group_by(spec, method, type) %>%
mutate(method = paste0(method, " CS")) %>%
summarise(bias = 100 * mean(est - g.true, na.rm = T),
emp.se = 100 * sd(est, na.rm = T),
est.se = 100 * mean(se),
ci.cov = 100 * mean(ci.cov, na.rm = T),
bcest.se = 100 * mean(bse, na.rm = T),
bcci.cov = 100 * mean(bcci.cov, na.rm = T))
kbl <- tbl %>%
kable(format = "latex",
align = c(rep("c", 2),
rep("r", 6)),
booktabs = TRUE,
linesep = c("", "", "\\addlinespace"),
escape = FALSE,
digits = c(0, 0,
1, 1, 1, 1, 1, 1),
col.names = c("Correct Specifications", "Method",
"Bias", "ESE", "ASE", "Cov", "ASE", "Cov"),
caption = "Estimated MSM Slope") %>%
add_header_above(c(" " = 4,
"UC" = 2,
"BC" = 2)) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
View(tbl)
kbl <- tbl %>%
kable(format = "latex",
align = c(rep("c", 2),
rep("r", 6)),
booktabs = TRUE,
linesep = c("", "", "\\addlinespace"),
escape = FALSE,
digits = c(0, 0,
1, 1, 1, 1, 1, 1),
col.names = c("Correct Specifications", "Method", "Type",
"Bias", "ESE", "ASE", "Cov", "ASE", "Cov"),
caption = "Estimated MSM Slope") %>%
add_header_above(c(" " = 4,
"UC" = 2,
"BC" = 2)) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
tbl
tbl2 <- sim.out %>%
filter(type == "MCCS",
n == 400) %>%
group_by(spec, method) %>%
mutate(method = paste0(method, " CS")) %>%
summarise(bias = 100 * mean(est - g.true, na.rm = T),
emp.se = 100 * sd(est, na.rm = T),
est.se = 100 * mean(se),
ci.cov = 100 * mean(ci.cov, na.rm = T),
bcest.se = 100 * mean(bse, na.rm = T),
bcci.cov = 100 * mean(bcci.cov, na.rm = T))
kbl2 <- tbl2 %>%
kable(format = "latex",
align = c(rep("c", 2),
rep("r", 6)),
booktabs = TRUE,
linesep = c("", "", "\\addlinespace"),
escape = FALSE,
digits = c(0, 0,
1, 1, 1, 1, 1, 1),
col.names = c("Correct Specifications", "Method", "Type",
"Bias", "ESE", "ASE", "Cov", "ASE", "Cov"),
caption = "Estimated MSM Slope") %>%
add_header_above(c(" " = 4,
"UC" = 2,
"BC" = 2)) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
