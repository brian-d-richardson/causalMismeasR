ci.upper = est + qnorm(0.975) * ste,
ci.cov = EYa.true >= ci.lower & EYa.true <= ci.upper)
# summarize proportion of missing data by setting
ftc.dat <- sim.out.long %>%
filter(aa == 1) %>%
group_by(method, n, B, vare) %>%
summarise(prop.error = mean(is.na(est)))
ftc.dat %>%
filter(prop.error > 0) %>%
ungroup()
# extract simulation parameters
n <- unique(sim.out$n)
# make labels for plots
method.labs <- c("Oracle GLM",
"Oracle G-Formula",
"Naive GLM",
"Naive G-Formula",
"Corrected GLM",
"Corrected G-Formula")
names(method.labs) <- c("OL", "OG",
"NL", "NG",
"CL", "CG")
n.labs <- paste0("n = ", n)
names(n.labs) <- n
a.labs <- paste0("a = ", a)
names(a.labs) <- a
# colorblind friendly pallette
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# separate plots for each exposure value a, and for selected methods
plot.by.a <- function(a., methods. = method.labs, title = T) {
plot <- sim.out.long %>%
filter(a == a.,
method %in% methods.) %>%
ggplot(aes(x = method,
y = est,
fill = method,
color = method)) +
geom_boxplot() +
geom_hline(aes(yintercept = EYa.true),
linetype = "dashed",
color = "orange") +
facet_wrap(~ n,
scales = "free",
ncol = 1,
labeller = labeller(n = n.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
legend.position = "bottom") +
scale_fill_manual(values = pal_light,
labels = method.labs) +
scale_color_manual(values = pal_dark,
labels = method.labs)
if (title) {
plot <- plot +
ggtitle(paste0("Empirical Distribution of Parameter Estimates"),
subtitle = paste0("a = ", a., "; ",
n.rep, " simulations per setting"))
}
return(plot)
}
plot.by.a(a. = 0)
plot.by.a(a. = 1)
plot.by.a(a. = 2)
plot.by.a(a. = 3)
plot.by.a(a. = 4)
tbl <- sim.out.long %>%
filter(method %in% c("Oracle G-Formula",
"Naive G-Formula",
"Corrected G-Formula") &
a == 3,
n %in% c(800, 8000)) %>%
group_by(n, method, a) %>%
summarise(bias = 100 * mean(est - EYa.true, na.rm = T),
emp.se = 100 * sd(est, na.rm = T),
est.se = 100 * mean(ste, na.rm = T),
ci.cov = 100 * mean(ci.cov, na.rm = T)) %>%
left_join(ftc.dat) %>%
mutate(ftc = 100 * prop.error) %>%
select(n, method, bias, emp.se, est.se, ci.cov, ftc)
tbl <- sim.out.long %>%
filter(a == 3 &
n %in% c(800, 8000)) %>%
group_by(n, method, a) %>%
summarise(bias = 100 * mean(est - EYa.true, na.rm = T),
emp.se = 100 * sd(est, na.rm = T),
est.se = 100 * mean(ste, na.rm = T),
ci.cov = 100 * mean(ci.cov, na.rm = T),
bcest.se = 100 * mean(bcs, na.rm = T),
bcci.cov = 100 * mean(bcci.cov, na.rm = T)) %>%
left_join(ftc.dat) %>%
mutate(ftc = 100 * prop.error) %>%
dplyr::select(n, method, bias,
emp.se, est.se, ci.cov, bcest.se, bcci.cov, ftc)
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("est") |
starts_with("ste") |
starts_with("bcs"),
names_to = "method.aa",
values_to = "val") %>%
mutate(method = factor(substr(method.aa, 5, 6),
levels = c("OG", "NG", "CG"),
labels = c("Oracle G-Formula",
"Naive G-Formula",
"Corrected G-Formula")),
aa = factor(substr(method.aa, 8, 8)),
a = factor(a[aa]),
name = factor(substr(method.aa, 1, 3)),
EYa.true = EYa.true[aa]) %>%
dplyr::select(-method.aa) %>%
group_by(clust, n, B, vare, method, aa, a, name) %>%
mutate(id = row_number()) %>%
pivot_wider(names_from = name,
values_from = val,
id_cols = c(clust, n, B, vare, method, aa, a, EYa.true, id)) %>%
mutate(ci.lower = est - qnorm(0.975) * ste,
ci.upper = est + qnorm(0.975) * ste,
ci.cov = EYa.true >= ci.lower & EYa.true <= ci.upper,
bcci.lower = est - qnorm(0.975) * bcs,
bcci.upper = est + qnorm(0.975) * bcs,
bcci.cov = EYa.true >= bcci.lower & EYa.true <= bcci.upper)
# summarize proportion of missing data by setting
ftc.dat <- sim.out.long %>%
filter(aa == 1) %>%
group_by(method, n, B, vare) %>%
summarise(prop.error = mean(is.na(est)))
ftc.dat %>%
filter(prop.error > 0) %>%
ungroup()
# extract simulation parameters
n <- unique(sim.out$n)
# make labels for plots
method.labs <- c("Oracle GLM",
"Oracle G-Formula",
"Naive GLM",
"Naive G-Formula",
"Corrected GLM",
"Corrected G-Formula")
names(method.labs) <- c("OL", "OG",
"NL", "NG",
"CL", "CG")
n.labs <- paste0("n = ", n)
names(n.labs) <- n
a.labs <- paste0("a = ", a)
names(a.labs) <- a
# colorblind friendly pallette
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# separate plots for each exposure value a, and for selected methods
plot.by.a <- function(a., methods. = method.labs, title = T) {
plot <- sim.out.long %>%
filter(a == a.,
method %in% methods.) %>%
ggplot(aes(x = method,
y = est,
fill = method,
color = method)) +
geom_boxplot() +
geom_hline(aes(yintercept = EYa.true),
linetype = "dashed",
color = "orange") +
facet_wrap(~ n,
scales = "free",
ncol = 1,
labeller = labeller(n = n.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
legend.position = "bottom") +
scale_fill_manual(values = pal_light,
labels = method.labs) +
scale_color_manual(values = pal_dark,
labels = method.labs)
if (title) {
plot <- plot +
ggtitle(paste0("Empirical Distribution of Parameter Estimates"),
subtitle = paste0("a = ", a., "; ",
n.rep, " simulations per setting"))
}
return(plot)
}
plot.by.a(a. = 0)
plot.by.a(a. = 1)
plot.by.a(a. = 2)
plot.by.a(a. = 3)
plot.by.a(a. = 4)
tbl <- sim.out.long %>%
filter(a == 3 &
n %in% c(800, 8000)) %>%
group_by(n, method, a) %>%
summarise(bias = 100 * mean(est - EYa.true, na.rm = T),
emp.se = 100 * sd(est, na.rm = T),
est.se = 100 * mean(ste, na.rm = T),
ci.cov = 100 * mean(ci.cov, na.rm = T),
bcest.se = 100 * mean(bcs, na.rm = T),
bcci.cov = 100 * mean(bcci.cov, na.rm = T)) %>%
left_join(ftc.dat) %>%
mutate(ftc = 100 * prop.error) %>%
dplyr::select(n, method, bias,
emp.se, est.se, ci.cov, bcest.se, bcci.cov, ftc)
View(tbl)
kbl <- tbl %>%
kable(format = "latex",
digits = c(0, 0, 2, 2, 2, 1, 2, 1, 1),
align = c(rep("c", 2),
rep("r", 7)),
booktabs = TRUE,
linesep = c("", "", "\\addlinespace"),
escape = FALSE,
col.names = c("n", "Method",
"Bias", "ESE", "ASE", "Cov",
"ASE (BC)", "Cov (BC)", "%FTC")) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
kbl <- tbl %>%
kable(#format = "latex",
digits = c(0, 0, 2, 2, 2, 1, 2, 1, 1),
align = c(rep("c", 2),
rep("r", 7)),
booktabs = TRUE,
linesep = c("", "", "\\addlinespace"),
escape = FALSE,
col.names = c("n", "Method",
"Bias", "ESE", "ASE", "Cov",
"ASE (BC)", "Cov (BC)", "%FTC")) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
kbl
tbl <- sim.out.long %>%
filter(a == 3) %>%  #&
#n %in% c(800, 8000)) %>%
group_by(n, method, a) %>%
summarise(bias = 100 * mean(est - EYa.true, na.rm = T),
emp.se = 100 * sd(est, na.rm = T),
est.se = 100 * mean(ste, na.rm = T),
ci.cov = 100 * mean(ci.cov, na.rm = T),
bcest.se = 100 * mean(bcs, na.rm = T),
bcci.cov = 100 * mean(bcci.cov, na.rm = T)) %>%
left_join(ftc.dat) %>%
mutate(ftc = 100 * prop.error) %>%
dplyr::select(n, method, bias, emp.se,
est.se, ci.cov, bcest.se, bcci.cov, ftc)
kbl <- tbl %>%
kable(format = "latex",
digits = c(0, 0, 2, 2, 2, 1, 2, 1, 1),
align = c(rep("c", 2),
rep("r", 7)),
booktabs = TRUE,
linesep = c("", "", "\\addlinespace"),
escape = FALSE,
col.names = c("n", "Method",
"Bias", "ESE", "ASE", "Cov",
"ASE (BC)", "Cov (BC)", "%FTC")) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
kbl
tbl <- sim.out.long %>%
filter(a == 3 &
n %in% c(800, 8000)) %>%
group_by(n, method, a) %>%
summarise(bias = 100 * mean(est - EYa.true, na.rm = T),
emp.se = 100 * sd(est, na.rm = T),
est.se = 100 * mean(ste, na.rm = T),
ci.cov = 100 * mean(ci.cov, na.rm = T),
bcest.se = 100 * mean(bcs, na.rm = T),
bcci.cov = 100 * mean(bcci.cov, na.rm = T)) %>%
left_join(ftc.dat) %>%
mutate(ftc = 100 * prop.error) %>%
dplyr::select(n, method, bias, emp.se,
est.se, ci.cov, bcest.se, bcci.cov, ftc)
kbl <- tbl %>%
kable(format = "latex",
digits = c(0, 0, 2, 2, 2, 1, 2, 1, 1),
align = c(rep("c", 2),
rep("r", 7)),
booktabs = TRUE,
linesep = c("", "", "\\addlinespace"),
escape = FALSE,
col.names = c("n", "Method",
"Bias", "ESE", "ASE", "Cov",
"ASE (BC)", "Cov (BC)", "%FTC")) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
kbl
group_by(n, method, a) %>%
summarise(bias = 100 * mean(est - EYa.true, na.rm = T),
emp.se = 100 * sd(est, na.rm = T),
est.se = 100 * mean(ste, na.rm = T),
ci.cov = 100 * mean(ci.cov, na.rm = T),
bcest.se = 100 * mean(bcs, na.rm = T),
bcci.cov = 100 * mean(bcci.cov, na.rm = T)) %>%
left_join(ftc.dat) %>%
mutate(ftc = 100 * prop.error) %>%
dplyr::select(n, method, bias, emp.se,
est.se, ci.cov, bcest.se, bcci.cov, ftc)
tbl2 <- sim.out.long %>%
filter(a == 3) %>% &
tbl2 <- sim.out.long %>%
filter(a == 3) &
n %in% c(400)) %>%
tbl2 <- sim.out.long %>%
filter(a == 3 &
n %in% c(400)) %>%
group_by(n, method, a) %>%
summarise(bias = 100 * mean(est - EYa.true, na.rm = T),
emp.se = 100 * sd(est, na.rm = T),
est.se = 100 * mean(ste, na.rm = T),
ci.cov = 100 * mean(ci.cov, na.rm = T),
bcest.se = 100 * mean(bcs, na.rm = T),
bcci.cov = 100 * mean(bcci.cov, na.rm = T)) %>%
left_join(ftc.dat) %>%
mutate(ftc = 100 * prop.error) %>%
dplyr::select(n, method, bias, emp.se,
est.se, ci.cov, bcest.se, bcci.cov, ftc)
kbl2 <- tbl2 %>%
kable(format = "latex",
digits = c(0, 0, 2, 2, 2, 1, 2, 1, 1),
align = c(rep("c", 2),
rep("r", 7)),
booktabs = TRUE,
linesep = c("", "", "\\addlinespace"),
escape = FALSE,
col.names = c("n", "Method",
"Bias", "ESE", "ASE", "Cov",
"ASE (BC)", "Cov (BC)", "%FTC")) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
tbl2
View(tbl2)
tbl <- sim.out.long %>%
filter(a == 3 &
n %in% c(400, 800, 8000)) %>%
group_by(n, method, a) %>%
summarise(bias = 100 * mean(est - EYa.true, na.rm = T),
emp.se = 100 * sd(est, na.rm = T),
est.se = 100 * mean(ste, na.rm = T),
ci.cov = 100 * mean(ci.cov, na.rm = T),
bcest.se = 100 * mean(bcs, na.rm = T),
bcci.cov = 100 * mean(bcci.cov, na.rm = T)) %>%
left_join(ftc.dat) %>%
mutate(ftc = 100 * prop.error) %>%
dplyr::select(n, method, bias, emp.se,
est.se, ci.cov, bcest.se, bcci.cov, ftc)
kbl <- tbl %>%
kable(format = "latex",
digits = c(0, 0, 2, 2, 2, 1, 2, 1, 1),
align = c(rep("c", 2),
rep("r", 7)),
booktabs = TRUE,
linesep = c("", "", "\\addlinespace"),
escape = FALSE,
col.names = c("n", "Method",
"Bias", "ESE", "ASE", "Cov",
"ASE (BC)", "Cov (BC)", "%FTC")) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
kbl
kbl <- tbl %>%
kable(format = "latex",
digits = c(0, 0, 2, 2, 2, 1, 2, 1, 1),
align = c(rep("c", 2),
rep("r", 7)),
booktabs = TRUE,
linesep = c("", "", "\\addlinespace"),
escape = FALSE,
col.names = c("n", "Method",
"Bias", "ESE",
"ASE", "Cov",
"ASE", "Cov",
"%FTC")) %>%
add_header_above(c("" = 4,
"Sandwich Var." = 2,
"Bias-Corrected Var." = 2,
"" = 1)) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
kbl <- tbl %>%
kable(format = "latex",
digits = c(0, 0, 2, 2, 2, 1, 2, 1, 1),
align = c(rep("c", 2),
rep("r", 7)),
booktabs = TRUE,
linesep = c("", "", "\\addlinespace"),
escape = FALSE,
col.names = c("n", "Method",
"Bias", "ESE",
"ASE", "Cov",
"ASE", "Cov",
"%FTC")) %>%
add_header_above(c(" " = 4,
"Sandwich Var." = 2,
"Bias-Corrected Var." = 2,
" " = 1)) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
kbl
rm(list = ls())
library(devtools)
library(statmod)
library(pbapply)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(MASS)
#setwd(dirname(getwd()))
load_all()
seed <- 3                                       # random seed
n <- 2000                                        # sample size
B <- 80                                         # MC replicates
cov.e <- 0.25                                   # var(epsilon)
mc.seed <- 123                                  # MC seed
pi.cc <- 0.25                                   # case-cohort proportion
inv.link <- inv.logit                           # inverse link
d.inv.link <- d.inv.logit                       # deriv of inv link
g <- c(-2, 0.7, -0.6, 0.4, -0.4, -0.2)          # outcome model parameters
formula <- "~A*L1 + A*L2"                       # outcome model formula
args <- list(formula = formula,                 # model fitting arguments
inv.link = inv.link,
d.inv.link = d.inv.link)
# according to DGP #1 in Blette submission
set.seed(seed)
L1 <- rbinom(n, 1, 0.5)                                        # confounder 1
L2 <- rbinom(n, 1, 0.2)                                        # confounder 2
A <- rnorm(n, 2 + 0.3*L1 - 0.5*L2, sqrt(0.6))
EY <- inv.link(model.matrix(as.formula(formula)) %*% g)        # mean of outcome
Y <- rbinom(n, 1, EY)                                          # outcome
Astar <- A + rnorm(n, 0, sqrt(cov.e))                          # mismeasured A
R <- rbinom(n, 1, pi.cc)                                       # c-c sampling
A[R == 0 & Y == 0] <-
Astar[R == 0 & Y == 0] <- NA
a <- seq(min(A, na.rm = T),                       # exposure values of interest
max(A, na.rm = T),
length = 10)
dat0 <- data.frame(Y, A, L1, L2, R)                 # oracle data
datstar <- data.frame(Y, Astar, L1, L2, R)          # mismeasured data
colnames(dat0) <- colnames(datstar) <- c("Y", "A", "L1", "L2", "R")
pi.hat <- mean(datstar$R[datstar$Y == 0])
datstar$cc.wts <- dat0$cc.wts <- (1 - datstar$Y) * datstar$R / pi.hat + Y
# g-formula
gfmla.naive <- fit.gfmla(data = datstar, a = a, args = args)
# oracle g-formula
gfmla.oracle <- fit.gfmla(data = dat0, a = a, args = args,
start = gfmla.naive$est[1:length(g)])
tic("naive G-formula")
library(tictoc)
tic("naive G-formula")
gfmla.naive <- fit.gfmla(data = datstar, a = a, args = args)
toc()
tic("oracle G-formula")
gfmla.oracle <- fit.gfmla(data = dat0, a = a, args = args,
start = gfmla.naive$est[1:length(g)])
toc()
tic("corrected G-formula")
gfmla.mccs <- fit.gfmla.mccs(data = datstar, a = a, args = args,
cov.e = cov.e, B = B, mc.seed = mc.seed,
start = gfmla.naive$est[1:length(g)])
toc()
format.gfmla.res <- function(a, gfmla.res, alpha = 0.05) {
EYa <- tail(gfmla.res$est, length(a))
se <- sqrt(tail(diag(gfmla.res$var), length(a)))
drc.dat <- data.frame(
a = a,
est = EYa,
se = se,
lower = EYa - qnorm(1 - alpha / 2) * se,
upper = EYa + qnorm(1 - alpha / 2) * se)
return(drc.dat)
}
drc.dat <- rbind(cbind(Method = "Naive", format.gfmla.res(a, gfmla.naive)),
cbind(Method = "Oracle", format.gfmla.res(a, gfmla.oracle)),
cbind(Method = "MCCS", format.gfmla.res(a, gfmla.mccs))) %>%
mutate(Method = factor(Method, levels = c("Naive", "Oracle", "MCCS")))
drc.true <- 0.4 * inv.link(-2 + 0.7 * a) +
0.4 * inv.link(-2.6 + 0.3 * a) +
0.1 * inv.link(-1.6 + 0.5 * a) +
0.1 * inv.link(-2.2 + 0.1 * a)
drc.dat$drc.true <- rep(drc.true, times = nlevels(drc.dat$Method))
ggplot(data = drc.dat,
aes(x = a,
y = est,
ymin = lower,
ymax = upper,
color = Method,
fill = Method)) +
geom_line(aes(y = drc.true),
color = "black",
alpha = 1,
linewidth = 1) +
geom_point() +
geom_line() +
geom_ribbon(alpha = 0.3) +
facet_grid(~Method) +
theme(legend.position = "none") +
labs(y = "Estimated E{Y(a)} with 95% CI")
drc.dat %>%
group_by(Method) %>%
summarise(mean.se = mean(se))
?sim.dr()
?sim.gfmla
?sim.gfmla.pos.vi()
document()
?sim.gfmla.pos.vi()
