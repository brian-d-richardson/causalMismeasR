xxo[upper.tri(xxo, diag = T)] - cov.a[upper.tri(cov.a)]
})
xx <- rsd[ii,]
vapply(X = 1:n,
FUN.VAL = numeric(len.A * (len.A + 1) / 2),
FUN = function(ii) {
xx <- rsd[ii,]
xxo <- outer(xx, xx)
xxo[upper.tri(xxo, diag = T)] - cov.a[upper.tri(cov.a)]
})
aa <- vapply(X = 1:n,
FUN.VAL = numeric(len.A * (len.A + 1) / 2),
FUN = function(ii) {
xx <- rsd[ii,]
xxo <- outer(xx, xx)
xxo[upper.tri(xxo, diag = T)] - cov.a[upper.tri(cov.a)]
})
View(aa)
aa <- t(vapply(
X = 1:n,
FUN.VAL = numeric(len.A * (len.A + 1) / 2),
FUN = function(ii) {
xx <- rsd[ii,]
xxo <- outer(xx, xx)
xxo[upper.tri(xxo, diag = T)] - cov.a[upper.tri(cov.a)]
}))
colSums(aa)
xxo[upper.tri(xxo, diag = T)] - cov.a[upper.tri(cov.a, diag = T)]
t(vapply(
X = 1:n,
FUN.VAL = numeric(len.A * (len.A + 1) / 2),
FUN = function(ii) {
xx <- rsd[ii,]
xxo <- outer(xx, xx)
xxo[upper.tri(xxo, diag = T)] - cov.a[upper.tri(cov.a, diag = T)]
}))
aa <- t(vapply(
X = 1:n,
FUN.VAL = numeric(len.A * (len.A + 1) / 2),
FUN = function(ii) {
xx <- rsd[ii,]
xxo <- outer(xx, xx)
xxo[upper.tri(xxo, diag = T)] - cov.a[upper.tri(cov.a, diag = T)]
}))
colSums(aa)
psi.ps.num <- cbind(
rsd, # mean
t(vapply(
X = 1:n,
FUN.VAL = numeric(len.A * (len.A + 1) / 2),
FUN = function(ii) {
xx <- rsd[ii,]
xxo <- outer(xx, xx)
xxo[upper.tri(xxo, diag = T)] - cov.a[upper.tri(cov.a, diag = T)]
})) *
cc.wts
if (return.sums) {
psi.ps.num <- cbind(
rsd, # mean
t(vapply(
X = 1:n,
FUN.VAL = numeric(len.A * (len.A + 1) / 2),
FUN = function(ii) {
xx <- rsd[ii,]
xxo <- outer(xx, xx)
xxo[upper.tri(xxo, diag = T)] - cov.a[upper.tri(cov.a, diag = T)]
}))) *
cc.wts
cc.wts <- rep(1, n)
psi.ps.num <- cbind(
rsd, # mean
t(vapply(
X = 1:n,
FUN.VAL = numeric(len.A * (len.A + 1) / 2),
FUN = function(ii) {
xx <- rsd[ii,]
xxo <- outer(xx, xx)
xxo[upper.tri(xxo, diag = T)] - cov.a[upper.tri(cov.a, diag = T)]
}))) *
cc.wts
colSums(psi.ps.num)
cov.a
cov.a[upper.tri(cov.a, diag = T)]
cov.a <- cov(A) * (n - 1) / n
psi.ps.num <- cbind(
rsd,      # mean
t(vapply( # covariance
X = 1:n,
FUN.VAL = numeric(len.A * (len.A + 1) / 2),
FUN = function(ii) {
xx <- rsd[ii,]
xxo <- outer(xx, xx)
xxo[upper.tri(xxo, diag = T)] - cov.a[upper.tri(cov.a, diag = T)]
}))) *
cc.wts
colSums(psi.ps.num)
load_all()
# combine MSM and PS model parameters
est <- c(root,                                       # MSM
coef.a.l, log(var.a.l),                     # A|L model
mean.a, cov.a[upper.tri(cov.a, diag = T)])  # A model
names(est) <- c(
paste0("g.", 0:(len.msm - 1)),
paste0("coef.a.l.", 1:(len.A*len.ps)),
paste0("log.var.a.l", 1:len.A),
paste0("mean.a.", 1:len.A),
paste0("cov.a.", 1:(len.A * (len.A + 1) / 2)))
x = est
coef.a.l <- matrix(x[len.msm + 1:(len.A*len.ps)],
ncol = len.ps, byrow = F)
var.a.l <- exp(x[len.msm + (len.A*len.ps) + 1:len.A])
mean.a <- x[len.msm + (len.A*len.ps) + len.A + 1:len.A]
cov.a <- matrix(0, len.A, len.A)
cov.a[upper.tri(cov.a, diag = T)] <- tail(x, len.A * (len.A + 1) / 2)
cov.a <- cov.a + t(cov.a) - diag(diag(cov.a))
cbind(
get.psi.ipw(
data = data, g = x, args = args,
mean.a = mean.a, cov.a = cov.a,
return.sums = F),
get.psi.ps(
data = data, ps.formula = ps.formula,
coef.a.l = coef.a.l, var.a.l = var.a.l,
return.sums = F)) }),
aa <- cbind(
get.psi.ipw(
data = data, g = x, args = args,
mean.a = mean.a, cov.a = cov.a,
return.sums = F),
get.psi.ps(
data = data, ps.formula = ps.formula,
coef.a.l = coef.a.l, var.a.l = var.a.l,
return.sums = F),
get.psi.ps.num(
data = data,
cov.a = cov.a, mean.a =
mean.a,return.sums = F
))
colSums(aa)
# sandwich variance estimates including PS model
evar <- matrix(NA, length(est), length(est))
if (return.var) {
evar <- tryCatch(
expr = get.sand.est(
ghat = est,
n = n,
get.psi = function(x) {
coef.a.l <- matrix(x[len.msm + 1:(len.A*len.ps)],
ncol = len.ps, byrow = F)
var.a.l <- exp(x[len.msm + (len.A*len.ps) + 1:len.A])
mean.a <- x[len.msm + (len.A*len.ps) + len.A + 1:len.A]
cov.a <- matrix(0, len.A, len.A)
cov.a[upper.tri(cov.a, diag = T)] <- tail(x, len.A * (len.A + 1) / 2)
cov.a <- cov.a + t(cov.a) - diag(diag(cov.a))
cbind(
get.psi.ipw(
data = data, g = x, args = args,
mean.a = mean.a, cov.a = cov.a,
return.sums = F),
get.psi.ps(
data = data, ps.formula = ps.formula,
coef.a.l = coef.a.l, var.a.l = var.a.l,
return.sums = F),
get.psi.ps.num(
data = data,
cov.a = cov.a, mean.a =
mean.a,return.sums = F
)) }),
warning = function(w) {message(w); evar},
error = function(e) {message(e); evar})
}
evar <- tryCatch(
expr = get.sand.est(
ghat = est,
n = n,
get.psi = function(x) {
coef.a.l <- matrix(x[len.msm + 1:(len.A*len.ps)],
ncol = len.ps, byrow = F)
var.a.l <- exp(x[len.msm + (len.A*len.ps) + 1:len.A])
mean.a <- x[len.msm + (len.A*len.ps) + len.A + 1:len.A]
cov.a <- matrix(0, len.A, len.A)
cov.a[upper.tri(cov.a, diag = T)] <- tail(x, len.A * (len.A + 1) / 2)
cov.a <- cov.a + t(cov.a) - diag(diag(cov.a))
cbind(
get.psi.ipw(
data = data, g = x, args = args,
mean.a = mean.a, cov.a = cov.a,
return.sums = F),
get.psi.ps(
data = data, ps.formula = ps.formula,
coef.a.l = coef.a.l, var.a.l = var.a.l,
return.sums = F),
get.psi.ps.num(
data = data,
cov.a = cov.a, mean.a =
mean.a,return.sums = F
)) }),
warning = function(w) {message(w); evar},
error = function(e) {message(e); evar})
evar
#round(res.NI2$var[1:3,1:3], 6)
round(evar[1:3,1:3], 6)
round(res.NI2$var[1:3,1:3], 6)
# (iv) MCCS IPW estimator
res.CI <- fit.ipw.mccs(data = datstar,
args = args.ipw,
cov.e = cov.e, B = B, mc.seed = mc.seed,
mean.a = colMeans(Astar),
cov.a = cov(Astar) - cov.e,
start = res.NI$est[1:3])
rm(list = ls())
library(MASS); library(devtools); load_all()
library(MASS); library(devtools); load_all()
n = 800; vare = 0.05; B = 80; seed = 1;
gg <- c(2, 1.5, -1.5, -2, 1, 1)                # Y|A,L parameters
ipw.formula <- "~A1 + A2"                      # MSM formula
ps.formula <- "~L+ I(L^2)"                     # PS model formula
inv.link <- inv.ident;                         # MSM link function
d.inv.link <- d.inv.ident;                     # MSM derivative of link
cov.e <- diag(c(vare, vare))                   # measurement error variance
mc.seed <- 123                                 # MCCS seed value
coef.a.l <- matrix(                            # coefs in A|L model
data = c(0, 0,
0, 0,
1, -1),
nrow = 3, byrow = T)
var.a.l <- c(0.09, 0.09)                       # variance of A|L
set.seed(seed)                                 # seed for reproducibility
L <- rnorm(n, 0, 0.36)                         # confounder
A <- mvrnorm(n = n,                            # true exposure
mu = c(0, 0),
Sigma = diag(var.a.l)) +
cbind(1, L, L^2) %*% coef.a.l
colnames(A) = paste0("A", 1:2)
Astar <- A + mvrnorm(n = n,                    # mismeasured exposure
m = c(0, 0),
Sigma = cov.e)
Y_mean <- cbind(1, A, L, A*L) %*% gg           # mean of outcome Y
Y <- rnorm(n, 0, 1) + Y_mean                  # outcome Y
colnames(A) <- colnames(Astar) <- c("A1", "A2")
dat0 <- data.frame(Y, A, L)                    # oracle data
datstar <- data.frame(Y, Astar, L)             # mismeasured data
len.A <- ncol(A)                               # dimension of A
mean.a <- colMeans(A)                          # marginal mean of A
cov.a <- cov(A)*(n-1)/n                        # marginal covariance of A
args.ipw <- list(formula = ipw.formula,        # arguments for fitting IPW
ps.formula = ps.formula,
inv.link = inv.link,
d.inv.link = d.inv.link)
# estimate means and covariances
E.A <- colMeans(datstar[,c("A1","A2")])            # E(A)
E.L <- mean(datstar$L)                             # E(L)
Sigma.AA <- cov(datstar[,c("A1","A2")]) - cov.e    # Cov(A)
Sigma.LA <- cov(datstar[,c("A1","A2")], datstar$L) # Cov(A, L)
Sigma.LL <- var(datstar$L)                         # Cov(L)
# estimate E(A | Astar, L)
E.A.AstarL <- E.A + t(
cbind(Sigma.AA, Sigma.LA) %*%
solve(rbind(cbind(Sigma.AA + cov.e, Sigma.LA),
cbind(t(Sigma.LA), Sigma.LL))) %*%
t(as.matrix(datstar[,c("A1", "A2", "L")] -
do.call(rbind, replicate(n, c(E.A, E.L), simplify = F)))))
# create data set for regression calibration
datrc <- data.frame(Y,
A1 = E.A.AstarL[,1],
A2 = E.A.AstarL[,2],
L)
# (i) naive IPW estimator
res.NI <- fit.ipw(data = datstar,
args = args.ipw)
# (ii) oracle IPW estimator
res.OI <- fit.ipw(data = dat0,
args = args.ipw,
start = res.NI$est[1:3])
# (iii) regression calibration IPW estimator
res.RI <- fit.ipw(data = datrc,
args = args.ipw,
start = res.NI$est[1:3])
# (iv) MCCS IPW estimator
res.CI <- fit.ipw.mccs(data = datstar,
args = args.ipw,
cov.e = cov.e, B = B, mc.seed = mc.seed,
mean.a = colMeans(Astar),
cov.a = cov(Astar) - cov.e,
start = res.NI$est[1:3])
data = datstar
args = args.ipw
cov.a = cov(Astar) - cov.e
cov.a
start = res.NI$est[1:3]
## unpack arguments
list2env(args, envir = environment())
## subset to complete cases if using case-cohort data
if ("R" %in% colnames(data)) {
data <- data[data$R == 1 | data$Y == 1,]
}
data$cc.wts <- 1
## store dimensions
n <- nrow(data)                                            # sample size
ind.A <- grepl("A", colnames(data))                        # exposure columns
A <- as.matrix(data[,ind.A])
L <- as.matrix(data[,grepl("L", colnames(data))])
len.A <- sum(ind.A)                                        # dim of exposure
len.msm <- ncol(model.matrix(                              # dim of msm params
terms(as.formula(formula)), data = data))
len.ps <- ncol(model.matrix(terms(as.formula(ps.formula)), # PS model params
data = data))                  # dim of ps params
d.cov.e <- diag(as.matrix(cov.e))                          # cov.e vector
# compute marginal mean and covariance of A if not supplied
if (is.null(mean.a)) { mean.a <- colMeans(as.matrix(A)) }
if (is.null(cov.a)) {
if (is.vector(A)) {
cov.a <- var(A) - cov.e
} else {
cov.a <- cov(A) - cov.e
}
}
# fit propensity score model if not supplied
if (is.null(coef.a.l) | is.null(var.a.l)) {
model.a.l <- lm(as.formula(paste0("A", ps.formula)),
data = data, weights = cc.wts)
coef.a.l <- t(coef(model.a.l))
var.a.l <- apply(as.matrix(model.a.l$residuals, ncol = len.a), 2, var) *
(n-1) / n -
d.cov.e
}
## get naive estimates to use as starting values
root.naive <- fit.ipw(data = data, args = args,
start = start, return.var = F)$est[1:len.msm]
## create MCCS IPW estimating function
get.psi.ipw.mccs <- make.mccs(
get.psi = function(data, g, args, return.sums = T) {
get.psi.ipw(data = data, args = args, g = g,
mean.a = mean.a, cov.a = cov.a,
return.sums = return.sums) },
data = data, args = args,
cov.e = cov.e, B = B, mc.seed = mc.seed)
# Solve MCCS IPW equation
root <- tryCatch(
expr =
rootSolve::multiroot(
f = function(xx) {
if (is.null(ps.wts)) {
x <- c(xx, c(coef.a.l), log(var.a.l))
} else {
x <- xx
}
get.psi.ipw.mccs(x = x) },
start = root.naive)$root,
warning = function(w) {message(w); rep(NA, len.msm)},
error = function(e) {message(e); rep(NA, len.msm)})
ps.wts = NULL
# Solve MCCS IPW equation
root <- tryCatch(
expr =
rootSolve::multiroot(
f = function(xx) {
if (is.null(ps.wts)) {
x <- c(xx, c(coef.a.l), log(var.a.l))
} else {
x <- xx
}
get.psi.ipw.mccs(x = x) },
start = root.naive)$root,
warning = function(w) {message(w); rep(NA, len.msm)},
error = function(e) {message(e); rep(NA, len.msm)})
# combine MSM and PS model parameters
est <- c(root,                                       # MSM
coef.a.l, log(var.a.l),                     # A|L model
mean.a, cov.a[upper.tri(cov.a, diag = T)])  # A model
names(est) <- c(
paste0("g.", 0:(len.msm - 1)),
paste0("coef.a.l.", 1:(len.A*len.ps)),
paste0("log.var.a.l", 1:len.A),
paste0("mean.a.", 1:len.A),
paste0("cov.a.", 1:(len.A * (len.A + 1) / 2)))
est
# sandwich variance estimates including PS model if requested
evar <- matrix(NA, length(est), length(est))
if (return.var) {
evar <- tryCatch(
expr = get.sand.est(
ghat = est,
n = n,
get.psi = function(x) {
coef.a.l <- matrix(x[len.msm + 1:(len.A*len.ps)],
ncol = len.ps, byrow = F)
var.a.l <- exp(x[len.msm + (len.A*len.ps) + 1:len.A])
mean.a <- x[len.msm + (len.A*len.ps) + len.A + 1:len.A]
cov.a <- matrix(0, len.A, len.A)
cov.a[upper.tri(cov.a, diag = T)] <- tail(x, len.A * (len.A + 1) / 2)
cov.a <- cov.a + t(cov.a) - diag(diag(cov.a))
cbind(
get.psi.ipw.mccs(x = x, return.sums = F),
get.psi.ps(
data = data, ps.formula = ps.formula,
coef.a.l = coef.a.l, var.a.l = var.a.l,
return.sums = F),
get.psi.ps.num(
data = data,
cov.a = cov.a, mean.a =
mean.a,return.sums = F
)) }),
warning = function(w) {message(w); evar},
error = function(e) {message(e); evar})
}
evar <- tryCatch(
expr = get.sand.est(
ghat = est,
n = n,
get.psi = function(x) {
coef.a.l <- matrix(x[len.msm + 1:(len.A*len.ps)],
ncol = len.ps, byrow = F)
var.a.l <- exp(x[len.msm + (len.A*len.ps) + 1:len.A])
mean.a <- x[len.msm + (len.A*len.ps) + len.A + 1:len.A]
cov.a <- matrix(0, len.A, len.A)
cov.a[upper.tri(cov.a, diag = T)] <- tail(x, len.A * (len.A + 1) / 2)
cov.a <- cov.a + t(cov.a) - diag(diag(cov.a))
cbind(
get.psi.ipw.mccs(x = x, return.sums = F),
get.psi.ps(
data = data, ps.formula = ps.formula,
coef.a.l = coef.a.l, var.a.l = var.a.l,
return.sums = F),
get.psi.ps.num(
data = data,
cov.a = cov.a, mean.a =
mean.a,return.sums = F
)) }),
warning = function(w) {message(w); evar},
error = function(e) {message(e); evar})
rm(list = ls())
library(MASS); library(devtools); load_all()
n = 800; vare = 0.05; B = 80; seed = 1;
gg <- c(2, 1.5, -1.5, -2, 1, 1)                # Y|A,L parameters
ipw.formula <- "~A1 + A2"                      # MSM formula
ps.formula <- "~L+ I(L^2)"                     # PS model formula
inv.link <- inv.ident;                         # MSM link function
d.inv.link <- d.inv.ident;                     # MSM derivative of link
cov.e <- diag(c(vare, vare))                   # measurement error variance
mc.seed <- 123                                 # MCCS seed value
coef.a.l <- matrix(                            # coefs in A|L model
data = c(0, 0,
0, 0,
1, -1),
nrow = 3, byrow = T)
var.a.l <- c(0.09, 0.09)                       # variance of A|L
# simulate data -----------------------------------------------------------
set.seed(seed)                                 # seed for reproducibility
L <- rnorm(n, 0, 0.36)                         # confounder
A <- mvrnorm(n = n,                            # true exposure
mu = c(0, 0),
Sigma = diag(var.a.l)) +
cbind(1, L, L^2) %*% coef.a.l
colnames(A) = paste0("A", 1:2)
Astar <- A + mvrnorm(n = n,                    # mismeasured exposure
m = c(0, 0),
Sigma = cov.e)
Y_mean <- cbind(1, A, L, A*L) %*% gg           # mean of outcome Y
Y <- rnorm(n, 0, 1) + Y_mean                  # outcome Y
colnames(A) <- colnames(Astar) <- c("A1", "A2")
dat0 <- data.frame(Y, A, L)                    # oracle data
datstar <- data.frame(Y, Astar, L)             # mismeasured data
#plot(L, A[,1]); plot(L, A[,2]); apply(A, 2, var) / apply(Astar, 2, var)
# store values for estimation ---------------------------------------------
len.A <- ncol(A)                               # dimension of A
mean.a <- colMeans(A)                          # marginal mean of A
cov.a <- cov(A)*(n-1)/n                        # marginal covariance of A
args.ipw <- list(formula = ipw.formula,        # arguments for fitting IPW
ps.formula = ps.formula,
inv.link = inv.link,
d.inv.link = d.inv.link)
# estimate E(A | Astar) for regression calibration ------------------------
# estimate means and covariances
E.A <- colMeans(datstar[,c("A1","A2")])            # E(A)
E.L <- mean(datstar$L)                             # E(L)
Sigma.AA <- cov(datstar[,c("A1","A2")]) - cov.e    # Cov(A)
Sigma.LA <- cov(datstar[,c("A1","A2")], datstar$L) # Cov(A, L)
Sigma.LL <- var(datstar$L)                         # Cov(L)
# estimate E(A | Astar, L)
E.A.AstarL <- E.A + t(
cbind(Sigma.AA, Sigma.LA) %*%
solve(rbind(cbind(Sigma.AA + cov.e, Sigma.LA),
cbind(t(Sigma.LA), Sigma.LL))) %*%
t(as.matrix(datstar[,c("A1", "A2", "L")] -
do.call(rbind, replicate(n, c(E.A, E.L), simplify = F)))))
# create data set for regression calibration
datrc <- data.frame(Y,
A1 = E.A.AstarL[,1],
A2 = E.A.AstarL[,2],
L)
# estimate MSM parameters -------------------------------------------------
# (i) naive IPW estimator
res.NI <- fit.ipw(data = datstar,
args = args.ipw)
# (iv) MCCS IPW estimator
res.CI <- fit.ipw.mccs(data = datstar,
args = args.ipw,
cov.e = cov.e, B = B, mc.seed = mc.seed,
mean.a = colMeans(Astar),
cov.a = cov(Astar) - cov.e,
start = res.NI$est[1:3])
res.CI
load_all()
# (iv) MCCS IPW estimator
res.CI <- fit.ipw.mccs(data = datstar,
args = args.ipw,
cov.e = cov.e, B = B, mc.seed = mc.seed,
mean.a = colMeans(Astar),
cov.a = cov(Astar) - cov.e,
start = res.NI$est[1:3])
res.CI
